import{_ as s,c as a,o as e,a6 as n}from"./chunks/framework.V1MgpNK7.js";const k=JSON.parse('{"title":"Go Build Remote Storage MCP Server Practice","description":"Combining practical cases, this article details how to use Go to build an efficient remote storage MCP server, covering architecture design, key implementation, technical challenges, and best practices.","frontmatter":{"title":"Go Build Remote Storage MCP Server Practice","date":"2025-07-01T12:00:00.000Z","tags":["golang","remote storage","MCP","programming technology"],"description":"Combining practical cases, this article details how to use Go to build an efficient remote storage MCP server, covering architecture design, key implementation, technical challenges, and best practices.","author":"PFinal南丞","keywords":"Go, remote storage, MCP, server, architecture design, concurrency, practice, programming, technology, experience sharing","sticky":true,"head":[["meta",{"name":"keywords","content":"Go, remote storage, MCP, server, architecture design, concurrency, practice, programming, technology, experience sharing,pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向"}]]},"headers":[],"relativePath":"golang/Go-Build-Remote-Storage-MCP-Server-Practice.md","filePath":"golang/Go-Build-Remote-Storage-MCP-Server-Practice.md","lastUpdated":1752112509000}'),t={name:"golang/Go-Build-Remote-Storage-MCP-Server-Practice.md"};function l(r,i,o,h,p,c){return e(),a("div",{"data-pagefind-body":!0},i[0]||(i[0]=[n(`<h1 id="building-a-remote-storage-mcp-server-in-go-from-zero-to-one-practice-and-reflection" tabindex="-1">Building a Remote Storage MCP Server in Go: From Zero to One Practice and Reflection <a class="header-anchor" href="#building-a-remote-storage-mcp-server-in-go-from-zero-to-one-practice-and-reflection" aria-label="Permalink to &quot;Building a Remote Storage MCP Server in Go: From Zero to One Practice and Reflection&quot;">​</a></h1><blockquote><p>&quot;Writing services in Go is as simple as stacking blocks.&quot; — A passionate Gopher</p></blockquote><h2 id="preface-why-choose-go-to-build-remote-storage-services" tabindex="-1">Preface: Why Choose Go to Build Remote Storage Services? <a class="header-anchor" href="#preface-why-choose-go-to-build-remote-storage-services" aria-label="Permalink to &quot;Preface: Why Choose Go to Build Remote Storage Services?&quot;">​</a></h2><p>In daily development, remote storage services are almost a standard for every medium and large system. Whether it&#39;s log archiving, configuration centers, or distributed caching, efficient and reliable remote storage is essential. Go, with its concurrency, performance, and ecosystem advantages, has become a popular choice for building such services.</p><p>Recently, I implemented a remote storage MCP (Mock Cloud Platform) server in Go. This article combines practical cases to discuss technology selection, architecture design, pitfalls, and best practices, aiming to inspire you to feel &quot;I can do it too&quot; after reading!</p><hr><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><ol><li><a href="#requirements-analysis-and-technology-selection">Requirements Analysis and Technology Selection</a></li><li><a href="#core-architecture-design">Core Architecture Design</a></li><li><a href="#key-implementation-and-code-examples">Key Implementation and Code Examples</a></li><li><a href="#technical-challenges-and-solutions">Technical Challenges and Solutions</a></li><li><a href="#practical-advice-and-best-practices">Practical Advice and Best Practices</a></li><li><a href="#summary-and-outlook">Summary and Outlook</a></li></ol><hr><h2 id="requirements-analysis-and-technology-selection" tabindex="-1">Requirements Analysis and Technology Selection <a class="header-anchor" href="#requirements-analysis-and-technology-selection" aria-label="Permalink to &quot;Requirements Analysis and Technology Selection&quot;">​</a></h2><h3 id="_1-requirements-breakdown" tabindex="-1">1. Requirements Breakdown <a class="header-anchor" href="#_1-requirements-breakdown" aria-label="Permalink to &quot;1. Requirements Breakdown&quot;">​</a></h3><ul><li>Support file upload, download, and deletion</li><li>Support multi-client concurrent access</li><li>Data persistence, no loss on power failure</li><li>Simple and easy to use, convenient for secondary development</li></ul><h3 id="_2-why-use-go" tabindex="-1">2. Why Use Go? <a class="header-anchor" href="#_2-why-use-go" aria-label="Permalink to &quot;2. Why Use Go?&quot;">​</a></h3><p>Referencing the views in &quot;Go Concurrency Patterns Practice Guide&quot; and &quot;Golang Productivity Tools.md&quot;, Go&#39;s concurrency model (goroutine + channel) makes developing remote storage services under high concurrency very easy. At the same time, Go&#39;s cross-platform compilation and rich third-party libraries (such as gin, gorm, zap) greatly improve development efficiency.</p><blockquote><p>&quot;Writing network services in Go, you get both performance and development efficiency.&quot; — From &quot;Go Concurrency Patterns Practice Guide&quot;</p></blockquote><hr><h2 id="core-architecture-design" tabindex="-1">Core Architecture Design <a class="header-anchor" href="#core-architecture-design" aria-label="Permalink to &quot;Core Architecture Design&quot;">​</a></h2><h3 id="architecture-diagram" tabindex="-1">Architecture Diagram <a class="header-anchor" href="#architecture-diagram" aria-label="Permalink to &quot;Architecture Diagram&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A[Client] --&gt;|HTTP/REST| B(MCP Server)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B --&gt; C[Local Storage]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B --&gt; D[Remote Object Storage (optional)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B --&gt; E[Metadata Database]</span></span></code></pre></div><h3 id="main-modules" tabindex="-1">Main Modules <a class="header-anchor" href="#main-modules" aria-label="Permalink to &quot;Main Modules&quot;">​</a></h3><ul><li><strong>API Layer</strong>: Handles client requests and responses (RESTful style)</li><li><strong>Storage Engine</strong>: Local file system or cloud storage (e.g., S3, OSS)</li><li><strong>Metadata Management</strong>: Records file info, permissions, etc.</li><li><strong>Concurrency Control</strong>: goroutine + channel for high-concurrency processing</li></ul><hr><h2 id="key-implementation-and-code-examples" tabindex="-1">Key Implementation and Code Examples <a class="header-anchor" href="#key-implementation-and-code-examples" aria-label="Permalink to &quot;Key Implementation and Code Examples&quot;">​</a></h2><h3 id="_1-api-layer-gin-framework" tabindex="-1">1. API Layer (Gin Framework) <a class="header-anchor" href="#_1-api-layer-gin-framework" aria-label="Permalink to &quot;1. API Layer (Gin Framework)&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/gin-gonic/gin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/upload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uploadHandler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/download/:filename&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, downloadHandler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/delete/:filename&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, deleteHandler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-file-upload-handling" tabindex="-1">2. File Upload Handling <a class="header-anchor" href="#_2-file-upload-handling" aria-label="Permalink to &quot;2. File Upload Handling&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uploadHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FormFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./data/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.Filename</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SaveUploadedFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file, dst); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: err.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Record metadata to database</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Upload successful&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-concurrency-handling-and-data-safety" tabindex="-1">3. Concurrency Handling and Data Safety <a class="header-anchor" href="#_3-concurrency-handling-and-data-safety" aria-label="Permalink to &quot;3. Concurrency Handling and Data Safety&quot;">​</a></h3><p>Referencing &quot;Golang Implementing Goroutine Pool.md&quot;, you can use a worker pool to control concurrency and avoid resource exhaustion:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uploadPool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Max 10 concurrent uploads</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeUploadHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uploadPool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}{}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    defer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uploadPool }()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...upload logic...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="technical-challenges-and-solutions" tabindex="-1">Technical Challenges and Solutions <a class="header-anchor" href="#technical-challenges-and-solutions" aria-label="Permalink to &quot;Technical Challenges and Solutions&quot;">​</a></h2><h3 id="_1-concurrency-safety" tabindex="-1">1. Concurrency Safety <a class="header-anchor" href="#_1-concurrency-safety" aria-label="Permalink to &quot;1. Concurrency Safety&quot;">​</a></h3><ul><li><strong>Challenge</strong>: Filename conflicts and data consistency issues under high concurrency</li><li><strong>Solution</strong>: Use unique IDs for filenames, lock metadata operations, or use database transactions</li></ul><h3 id="_2-large-file-uploads" tabindex="-1">2. Large File Uploads <a class="header-anchor" href="#_2-large-file-uploads" aria-label="Permalink to &quot;2. Large File Uploads&quot;">​</a></h3><ul><li><strong>Challenge</strong>: High memory usage, slow uploads</li><li><strong>Solution</strong>: Use chunked uploads, write to disk while receiving, refer to streaming techniques in &quot;Go Terminal Tools.md&quot;</li></ul><h3 id="_3-persistence-and-disaster-recovery" tabindex="-1">3. Persistence and Disaster Recovery <a class="header-anchor" href="#_3-persistence-and-disaster-recovery" aria-label="Permalink to &quot;3. Persistence and Disaster Recovery&quot;">​</a></h3><ul><li><strong>Challenge</strong>: Local storage is prone to loss; how to ensure data safety?</li><li><strong>Solution</strong>: Regularly sync to cloud storage, or use RAID/NAS solutions, combined with backup advice in &quot;Golang Web Application Security Guide&quot;</li></ul><hr><h2 id="practical-advice-and-best-practices" tabindex="-1">Practical Advice and Best Practices <a class="header-anchor" href="#practical-advice-and-best-practices" aria-label="Permalink to &quot;Practical Advice and Best Practices&quot;">​</a></h2><ol><li><strong>Keep API design simple</strong>: RESTful style, easy for frontend-backend collaboration</li><li><strong>Logging and monitoring are essential</strong>: Use zap, prometheus to record and monitor service status</li><li><strong>Error handling should be meticulous</strong>: Every step should have a fallback, avoid panic</li><li><strong>Comprehensive testing</strong>: Unit + integration tests to ensure core functions are stable</li><li><strong>Documentation should be complete</strong>: API docs, deployment docs, and maintenance manuals are all necessary</li></ol><blockquote><p>&quot;No matter how good the tool, if no one uses it, it&#39;s wasted.&quot; — From &quot;Productivity-Boosting Golang Tools.md&quot;</p></blockquote><hr><h2 id="summary-and-outlook" tabindex="-1">Summary and Outlook <a class="header-anchor" href="#summary-and-outlook" aria-label="Permalink to &quot;Summary and Outlook&quot;">​</a></h2><p>Building a remote storage MCP server in Go not only lets you enjoy high performance and concurrency, but also lets you experience the &quot;joy of engineering&quot;—solving complex problems with clean and elegant code. Along the way, you&#39;ll inevitably encounter various challenges, but as long as you make good use of Go&#39;s features and community resources, every problem can be solved.</p><p>In the future, consider:</p><ul><li>Supporting multiple storage backends (e.g., S3, OSS, MinIO)</li><li>Introducing distributed consistency protocols (e.g., Raft) to improve reliability</li><li>Opening up plugin mechanisms for easier secondary development</li></ul><p>I hope this article provides some inspiration and practical advice for your exploration in the Go field. If you have similar experiences, feel free to comment and exchange!</p><hr><blockquote><p><strong>&quot;Beyond code, there is also scenery.&quot;</strong> — Wishing you happy Go coding and stable services!</p></blockquote>`,50)]))}const g=s(t,[["render",l]]);export{k as __pageData,g as default};
