import{_ as i,c as e,o as s,a6 as t}from"./chunks/framework.dsRYTprt.js";const k=JSON.parse('{"title":"Broot-让文件导航更高效的命令行神器","description":"Broot 是一款由 Rust 编写的高效终端文件管理器，提供直观的树状视图、模糊搜索、快速导航和文件预览等强大功能","frontmatter":{"title":"Broot-让文件导航更高效的命令行神器","date":"2025-10-15T09:33:00.000Z","tags":["工具","命令行","Rust"],"description":"Broot 是一款由 Rust 编写的高效终端文件管理器，提供直观的树状视图、模糊搜索、快速导航和文件预览等强大功能","author":"PFinal南丞","keywords":"Broot, 命令行工具, 文件管理, 终端工具, Rust, 目录导航, 文件浏览器, CLI工具","sticky":true,"head":[["meta",{"name":"keywords","content":"Broot, 命令行工具, 文件管理, 终端工具, Rust, 目录导航, 文件浏览器, CLI工具"}]]},"headers":[],"relativePath":"zh/工具/Broot-高效的命令行文件管理器.md","filePath":"zh/工具/Broot-高效的命令行文件管理器.md","lastUpdated":1760498498000}'),o={name:"zh/工具/Broot-高效的命令行文件管理器.md"};function l(d,a,h,n,r,p){return s(),e("div",{"data-pagefind-body":!0},a[0]||(a[0]=[t(`<h1 id="broot-终端里的文件导航神器" tabindex="-1">Broot：终端里的文件导航神器 <a class="header-anchor" href="#broot-终端里的文件导航神器" aria-label="Permalink to &quot;Broot：终端里的文件导航神器&quot;">​</a></h1><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202510150933205.png" alt=""></p><p>说实话，每次在终端里用 <code>cd</code> 命令一层层往下翻目录的时候，我都有种在迷宫里找出口的感觉。尤其是那种嵌套了七八层的项目目录，找个文件能把人找到怀疑人生。<code>tree</code> 命令倒是能看到整体结构，但输出一大堆文本，眼睛都看花了。</p><p>直到我遇到了 <strong>Broot</strong>，这玩意儿算是拯救了我的终端生活。</p><h2 id="broot-是个啥" tabindex="-1">Broot 是个啥？ <a class="header-anchor" href="#broot-是个啥" aria-label="Permalink to &quot;Broot 是个啥？&quot;">​</a></h2><p>简单说，Broot 就是用 Rust 写的一个终端文件管理器。它能把你的目录用树状结构展示出来，而且可以边看边搜索、边操作。关键是速度快得飞起，再大的目录都不在话下。</p><h3 id="它能干啥" tabindex="-1">它能干啥？ <a class="header-anchor" href="#它能干啥" aria-label="Permalink to &quot;它能干啥？&quot;">​</a></h3><p><strong>速度是真的快</strong></p><p>我试过在一个有几万个文件的项目里用它，秒开。那种复杂的目录结构，Broot 能瞬间给你展示出来，不像 <code>tree</code> 命令那样哗啦哗啦刷屏半天。</p><p><strong>搜索很聪明</strong></p><p>你可以模糊搜索（就是输几个字母就能找到），也可以用正则表达式（适合有强迫症的同学），甚至能搜文件内容。找个文件真的是秒秒钟的事儿。</p><p><strong>界面看着舒服</strong></p><p>树状结构一目了然，你在哪层目录、文件关系是啥，清清楚楚。再也不用 <code>pwd</code> 一下看看自己在哪了。</p><p><strong>文件预览挺方便</strong></p><p>选中文件按个快捷键就能预览，代码还有高亮。不用每次都打开编辑器看一眼再关掉，省事。</p><p><strong>批量操作不在话下</strong></p><p>复制、移动、删除文件都支持，再也不用写那种一行能绕地球三圈的 shell 脚本了。</p><p><strong>双面板操作</strong></p><p>就像以前 Windows 上用的 Total Commander，左右两个窗口，文件想怎么搬就怎么搬。</p><p><strong>Git 集成真香</strong></p><p>这个功能我太爱了。直接能看到哪些文件改了、加了、删了，提交代码前扫一眼，心里有数。</p><p><strong>哪都能用</strong></p><p>Windows、macOS、Linux 都支持，不管你用啥系统都能用。</p><p><strong>想怎么配就怎么配</strong></p><p>快捷键、配色、命令都能自己定制。反正我是把常用的操作都绑到顺手的键位上了。</p><h2 id="怎么装" tabindex="-1">怎么装？ <a class="header-anchor" href="#怎么装" aria-label="Permalink to &quot;怎么装？&quot;">​</a></h2><p>安装很简单，看你用啥系统：</p><p><strong>如果你装了 Rust</strong></p><p>一行命令搞定：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broot</span></span></code></pre></div><p><strong>macOS 用户</strong></p><p>Homebrew 走起：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broot</span></span></code></pre></div><p><strong>Debian/Ubuntu</strong></p><p>APT 就行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broot</span></span></code></pre></div><p><strong>其他 Linux 发行版</strong></p><p>去 <a href="https://github.com/Canop/broot/releases" target="_blank" rel="noreferrer">GitHub Releases</a> 下载编译好的二进制文件就行。</p><h3 id="第一次跑要注意" tabindex="-1">第一次跑要注意 <a class="header-anchor" href="#第一次跑要注意" aria-label="Permalink to &quot;第一次跑要注意&quot;">​</a></h3><p>装完第一次运行 <code>broot</code> 的时候，它会问你要不要装个 shell 函数。这个<strong>一定要装</strong>，不然后面用起来不方便。跟着提示走就行，一般是让你在 <code>.bashrc</code> 或 <code>.zshrc</code> 里加一行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.config/broot/launcher/bash/br</span></span></code></pre></div><p>加完之后重启下终端，或者 <code>source</code> 一下配置文件。</p><h2 id="怎么用" tabindex="-1">怎么用？ <a class="header-anchor" href="#怎么用" aria-label="Permalink to &quot;怎么用？&quot;">​</a></h2><h3 id="启动很简单" tabindex="-1">启动很简单 <a class="header-anchor" href="#启动很简单" aria-label="Permalink to &quot;启动很简单&quot;">​</a></h3><p>终端里敲个 <code>br</code> 就行（记得前面配置 shell 函数了）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">br</span></span></code></pre></div><h3 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h3><p>启动后就能看到树状的目录结构了。</p><p><strong>移动光标</strong></p><ul><li>方向键或者 <code>h/j/k/l</code> 都行（vim 党狂喜）</li><li><code>Enter</code> 进入目录</li><li><code>Esc</code> 或 <code>Backspace</code> 返回上一级</li><li><code>Ctrl + ↓/↑</code> 可以快速在目录层级间跳转</li></ul><p><strong>搜索文件</strong></p><p>直接在底部输入框打字就能搜，实时过滤的那种。</p><ul><li>想模糊搜索？直接打几个字母</li><li>想精确搜索？用正则表达式，比如 <code>/\\.md$</code> 找所有 Markdown 文件</li><li>想搜文件内容？加个 <code>c/</code> 前缀</li></ul><p><strong>预览文件</strong></p><p>选中文件按 <code>Ctrl + →</code> 就能看到内容，代码还有高亮。看一眼就知道是不是要找的文件，省得打开编辑器。</p><h3 id="常用命令记一下" tabindex="-1">常用命令记一下 <a class="header-anchor" href="#常用命令记一下" aria-label="Permalink to &quot;常用命令记一下&quot;">​</a></h3><p>底部输入框按 <code>:</code> 就能输命令：</p><ul><li><code>:q</code> - 退出（这个必须会）</li><li><code>:h</code> - 显示/隐藏那些以点开头的隐藏文件</li><li><code>:size</code> - 看文件大小</li><li><code>:dates</code> - 看修改日期</li><li><code>:git_status</code> - 看 Git 状态（开发者必备）</li><li><code>:cp</code> - 复制</li><li><code>:mv</code> - 移动</li><li><code>:rm</code> - 删除（小心点用）</li><li><code>:mkdir</code> - 新建目录</li></ul><h3 id="操作文件也简单" tabindex="-1">操作文件也简单 <a class="header-anchor" href="#操作文件也简单" aria-label="Permalink to &quot;操作文件也简单&quot;">​</a></h3><p>比如复制个文件：选中 → 输入 <code>:cp</code> → 输入目标路径 → 搞定</p><p>移动文件也一样，<code>:mv</code> 就行。</p><p>删除的话用 <code>:rm</code>，不过删之前它会让你确认，还算比较安全。</p><h2 id="进阶玩法" tabindex="-1">进阶玩法 <a class="header-anchor" href="#进阶玩法" aria-label="Permalink to &quot;进阶玩法&quot;">​</a></h2><h3 id="双面板模式" tabindex="-1">双面板模式 <a class="header-anchor" href="#双面板模式" aria-label="Permalink to &quot;双面板模式&quot;">​</a></h3><p>按 <code>Ctrl + →</code> 能打开第二个面板，就像以前用 Total Commander 那样。</p><ul><li><code>Ctrl + ←/→</code> 在面板之间切换</li><li>两个面板之间直接拖文件（当然，是用命令&quot;拖&quot;）</li><li><code>Ctrl + w</code> 关掉当前面板</li></ul><p>这个模式整理文件特别爽，左边源目录，右边目标目录，想怎么搬就怎么搬。</p><h3 id="排序功能" tabindex="-1">排序功能 <a class="header-anchor" href="#排序功能" aria-label="Permalink to &quot;排序功能&quot;">​</a></h3><p>找大文件或者最近改的文件，排个序就行：</p><ul><li><code>:sort_by_size</code> - 按大小排</li><li><code>:sort_by_date</code> - 按日期排</li><li><code>:sort_by_name</code> - 按名字排</li></ul><p>清理磁盘空间的时候，<code>:sort_by_size</code> 一用，大文件一目了然。</p><h3 id="看磁盘占用" tabindex="-1">看磁盘占用 <a class="header-anchor" href="#看磁盘占用" aria-label="Permalink to &quot;看磁盘占用&quot;">​</a></h3><p><code>:sizes</code> 这个命令挺实用的，能看到每个目录占了多少空间。比 <code>du</code> 命令直观多了，你能直接在树状结构里看哪个目录最占地方。</p><h3 id="调用外部命令" tabindex="-1">调用外部命令 <a class="header-anchor" href="#调用外部命令" aria-label="Permalink to &quot;调用外部命令&quot;">​</a></h3><p>Broot 里还能直接跑外部命令。选中文件后输入 <code>:!命令</code>，比如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {file}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 直接看文件内容</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {file}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 用 VS Code 打开</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {file}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # vim 党专用</span></span></code></pre></div><p><code>{file}</code> 会自动替换成你选中的文件路径。</p><h3 id="自定义配置" tabindex="-1">自定义配置 <a class="header-anchor" href="#自定义配置" aria-label="Permalink to &quot;自定义配置&quot;">​</a></h3><p>配置文件在 <code>~/.config/broot/conf.hjson</code>，想怎么改就怎么改。</p><p>我一般会加个快捷命令，比如一键用 VS Code 打开：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    invocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code {file}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    leave_broot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样选中文件后直接输入 <code>code</code> 回车就能打开了。</p><h3 id="git-状态查看" tabindex="-1">Git 状态查看 <a class="header-anchor" href="#git-状态查看" aria-label="Permalink to &quot;Git 状态查看&quot;">​</a></h3><p>在 Git 仓库里用 Broot，输入 <code>:git_status</code> 就能看到所有文件的状态：</p><ul><li><code>M</code> - 改了</li><li><code>A</code> - 新加的</li><li><code>D</code> - 删了</li><li><code>??</code> - 还没加到 Git 里</li></ul><p>提交代码前看一眼，哪些文件动过，清清楚楚。</p><h2 id="几个实用技巧" tabindex="-1">几个实用技巧 <a class="header-anchor" href="#几个实用技巧" aria-label="Permalink to &quot;几个实用技巧&quot;">​</a></h2><h3 id="快速跳转项目目录" tabindex="-1">快速跳转项目目录 <a class="header-anchor" href="#快速跳转项目目录" aria-label="Permalink to &quot;快速跳转项目目录&quot;">​</a></h3><p>在 <code>.bashrc</code> 或 <code>.zshrc</code> 里加个别名：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> brp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;br ~/projects&#39;</span></span></code></pre></div><p>以后想看项目目录，直接 <code>brp</code> 就行。</p><h3 id="配合-cd-使用" tabindex="-1">配合 cd 使用 <a class="header-anchor" href="#配合-cd-使用" aria-label="Permalink to &quot;配合 cd 使用&quot;">​</a></h3><p>这是个很妙的功能。用 <code>br</code> 命令（不是 <code>broot</code>）启动，选好目录按 <code>Alt+Enter</code> 退出，终端会自动 cd 到那个目录。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">br</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 选个目录，退出后就在那个目录了</span></span></code></pre></div><p>再也不用一层层 <code>cd</code> 了。</p><h3 id="搜索特定文件类型" tabindex="-1">搜索特定文件类型 <a class="header-anchor" href="#搜索特定文件类型" aria-label="Permalink to &quot;搜索特定文件类型&quot;">​</a></h3><p>用正则表达式能快速筛选文件：</p><ul><li>找 JS 文件：<code>/\\.js$</code></li><li>找图片：<code>/\\.(png|jpg|gif)$</code></li><li>找配置：<code>/\\.config</code></li></ul><p>习惯了这个，找文件快到飞起。</p><h3 id="清理磁盘的时候" tabindex="-1">清理磁盘的时候 <a class="header-anchor" href="#清理磁盘的时候" aria-label="Permalink to &quot;清理磁盘的时候&quot;">​</a></h3><p><code>:sizes</code> + <code>:sort_by_size</code>，组合拳下去，最占空间的目录立马现形。</p><h3 id="设置书签" tabindex="-1">设置书签 <a class="header-anchor" href="#设置书签" aria-label="Permalink to &quot;设置书签&quot;">​</a></h3><p>常用目录可以设个快捷键。在配置文件里加：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ctrl-p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:goto ~/projects&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>按个 <code>Ctrl+P</code> 就能跳到项目目录，贼方便。</p><h2 id="实际场景举几个例子" tabindex="-1">实际场景举几个例子 <a class="header-anchor" href="#实际场景举几个例子" aria-label="Permalink to &quot;实际场景举几个例子&quot;">​</a></h2><h3 id="大项目里找文件" tabindex="-1">大项目里找文件 <a class="header-anchor" href="#大项目里找文件" aria-label="Permalink to &quot;大项目里找文件&quot;">​</a></h3><p>有次在一个几千个文件的项目里找一个组件，传统方法是 IDE 全局搜索，等半天。用 Broot：</p><ol><li><code>br</code> 启动</li><li>输入 <code>header</code>（组件名的关键词）</li><li>实时过滤出所有匹配文件</li><li>方向键选一下</li><li><code>Ctrl + →</code> 预览确认</li><li>输入 <code>:code</code> 打开</li></ol><p>全程不到 5 秒。</p><h3 id="清理-node-modules" tabindex="-1">清理 node_modules <a class="header-anchor" href="#清理-node-modules" aria-label="Permalink to &quot;清理 node_modules&quot;">​</a></h3><p>前端项目搞久了，满硬盘都是 <code>node_modules</code>。用 Broot 找出来：</p><ol><li><code>br</code> 启动</li><li>输入 <code>node_modules</code> 过滤</li><li><code>:sizes</code> 看看哪个最占地方</li><li>选中不用的</li><li><code>:rm</code> 删掉</li></ol><p>几个 GB 就这么省出来了。</p><h3 id="提交代码前检查" tabindex="-1">提交代码前检查 <a class="header-anchor" href="#提交代码前检查" aria-label="Permalink to &quot;提交代码前检查&quot;">​</a></h3><p>提交代码之前想看看改了啥：</p><ol><li>在仓库里 <code>br</code></li><li><code>:git_status</code> 一看，所有改动的文件都出来了</li><li>逐个 <code>Ctrl + →</code> 预览一下</li><li>心里有数了再提交</li></ol><p>比 <code>git status</code> 好用多了。</p><h3 id="批量操作文件" tabindex="-1">批量操作文件 <a class="header-anchor" href="#批量操作文件" aria-label="Permalink to &quot;批量操作文件&quot;">​</a></h3><p>虽然 Broot 没有内置批量重命名，但可以配合外部命令。比如找出所有 <code>.js</code> 文件，然后用 <code>:!</code> 调用自己写的脚本批量处理。</p><h2 id="和其他工具比比" tabindex="-1">和其他工具比比 <a class="header-anchor" href="#和其他工具比比" aria-label="Permalink to &quot;和其他工具比比&quot;">​</a></h2><h3 id="对比-ls" tabindex="-1">对比 ls <a class="header-anchor" href="#对比-ls" aria-label="Permalink to &quot;对比 ls&quot;">​</a></h3><p><code>ls</code> 只能看当前目录，想看子目录得一层层进去。Broot 直接树状结构展开，还能实时搜索。</p><h3 id="对比-tree" tabindex="-1">对比 tree <a class="header-anchor" href="#对比-tree" aria-label="Permalink to &quot;对比 tree&quot;">​</a></h3><p><code>tree</code> 命令在大目录里会刷屏刷到你怀疑人生。Broot 自动折叠，还能交互，体验完全不同。</p><h3 id="对比-midnight-commander" tabindex="-1">对比 Midnight Commander <a class="header-anchor" href="#对比-midnight-commander" aria-label="Permalink to &quot;对比 Midnight Commander&quot;">​</a></h3><p>MC 功能是强大，但学习成本也高。Broot 界面更现代，上手快，该有的功能也都有。</p><h3 id="对比图形化文件管理器" tabindex="-1">对比图形化文件管理器 <a class="header-anchor" href="#对比图形化文件管理器" aria-label="Permalink to &quot;对比图形化文件管理器&quot;">​</a></h3><p>GUI 文件管理器要鼠标点来点去，在终端环境下还得切来切去。Broot 纯键盘操作，不用离开终端，效率高。</p><h2 id="性能怎么样" tabindex="-1">性能怎么样？ <a class="header-anchor" href="#性能怎么样" aria-label="Permalink to &quot;性能怎么样？&quot;">​</a></h2><p>因为是 Rust 写的，性能没得说：</p><ul><li>大目录秒开，我试过几万文件的项目，瞬间就出来了</li><li>内存占用很低，常驻也不心疼</li><li>搜索是实时的，打字就能看结果</li><li>处理大量文件毫无压力</li></ul><p>我测过一个 5 万+ 文件的目录，不到 1 秒就索引完了。传统工具根本做不到。</p><h2 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h2><p>用了 Broot 几个月，真的回不去了。</p><p>以前在终端里找文件，<code>cd</code> 来 <code>cd</code> 去，<code>ls</code> 看半天，现在直接 <code>br</code> 一开，搜一下，秒到位。特别是处理那种层级巨深的项目，Broot 简直就是救星。</p><p>Git 集成也是真香，提交代码前 <code>:git_status</code> 扫一眼，哪些文件动过、改了啥，清清楚楚。配合预览功能，连 IDE 都不用开。</p><p>最爽的是双面板模式，整理文件的时候特别爽。左边源目录，右边目标目录，想怎么搬就怎么搬，比写 shell 脚本快多了。</p><p>性能方面也没话说，Rust 写的就是快。几万个文件的目录秒开，搜索也是实时的，用起来一点都不卡。</p><p>如果你也经常在终端里干活，或者被复杂的目录结构折磨过，试试 Broot 吧。装上之后记得配置好 shell 函数，不然体验会打折扣。</p><p>反正我是装上之后，<code>cd</code> 命令用得越来越少了。😄</p><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h2><ul><li>GitHub 仓库：<a href="https://github.com/Canop/broot" target="_blank" rel="noreferrer">https://github.com/Canop/broot</a></li><li>官方文档：<a href="https://dystroy.org/broot/" target="_blank" rel="noreferrer">https://dystroy.org/broot/</a></li><li>配置示例：<a href="https://github.com/Canop/broot/tree/main/resources" target="_blank" rel="noreferrer">https://github.com/Canop/broot/tree/main/resources</a></li></ul><hr><p><em>有啥问题欢迎留言交流~</em></p>`,145)]))}const u=i(o,[["render",l]]);export{k as __pageData,u as default};
