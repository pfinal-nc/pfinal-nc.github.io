import{_ as s,c as n,o as e,a6 as p}from"./chunks/framework.B5rgnJXo.js";const u=JSON.parse('{"title":"Python版本管理神器之pyenv","description":"详细介绍pyenv这款强大的Python版本管理工具，包括安装配置、版本切换、虚拟环境管理等核心功能，帮助开发者轻松管理多个Python版本。","frontmatter":{"title":"Python版本管理神器之pyenv","date":"2023-04-27T22:10:20.000Z","author":"PFinal南丞","tags":["python"],"keywords":"Python版本管理神器之pyenv, python, 工具, python版本管理, pyenv使用教程, python环境配置,爬虫JS逆向Webpack技巧记录, 爬虫, JS, Webpack,爬虫, 加密, 解密, 算法, 特征, 收集,爬虫, 加密, 解密, 算法, 特征, 收集,Composer, 配置文件, 依赖管理, 包管理, 版本控制,PHP, 进程, 线程, 解析, PHP进程, PHP线程, PHP进程线程, PHP进程线程解析, PHP进程线程解析,PHP, $_SERVER,PHP, 会话, 引发, Bug, PHP_SESSION, $_SESSION, 会话管理,PHP, 错误与异常处理, 异常, 错误, 处理, 异常处理, 错误处理, 程序, 健壮性, 稳定性,PHP, 生成器, 解析, PHP生成器, PHP生成器解析, PHP生成器解析,golang, gopsutil, 系统库, 监控, 系统信息, 进程, 进程监控, 系统信息获取,使用Go实现服务端事件推送SSE, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,用Wails和Vue.js打造跨平台桌面应用程序, Wails, Vue.js, 跨平台桌面应用程序, 抖音, 直播,基于Wails的Mac桌面应用开发, golang, Wails, 桌面应用, 开发,基于Wails的抖音直播工具, golang, Wails, 抖音, 直播, 工具, 桌面应用,golang, 游戏开发, 接口设计, 高性能, 高并发, 游戏服务器, 游戏接口, 游戏框架,Wails, 应用, 开发, 尝试, 桌面应用, Go, Web开发, Tailwindcss, sqlite,Go-Cache, Wails, 内存缓存, 性能优化, 缓存策略, 内存管理, 应用程序性能,golang, 工具, 提升生产力, 开发, golang, Go开发, Go工具, Go扩展包,提速利器：使用Go语言实现静态化API, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,深入Go内存分配, golang, 内存分配,Go Channel, 批量读取, 实际应用,Laravel, 构建, 手工, 框架, 手工构建, PHP,Laravel, Carbon, 类, 使用, Laravel-Carbon-类使用, Laravel-Carbon-类使用解析,Golang, Web应用, 安全指南, 输入验证, 输出编码, 会话管理, 文件上传, 跨站脚本攻击, SQL注入, 密码存储, 身份验证, 授权, 安全配置, 日志记录, 错误处理, 性能优化, 安全审计,golang, TLS, SSL, 网络安全, 传输层安全协议, 安全套接层, 加密, 数据传输, 网络通信,Golang, 协程池, 实现, 方法, 协程, 池, 概念, 应用, 场景, 实现方式, 协程池功能, 性能, 响应速度,golang, 脱敏扩展包：简化敏感信息处理的利器, 工具, golang扩展包, golang脱敏, golang脱敏工具,Golang, 工具, 效率, 提升, 小工具, 代码质量, 开发, 编程, 工具, 自动格式化, 自动导入, 代码补全,undefined,AutoCorrent专有名词大小写扩展包, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Create Go App CLI, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Go语言开发终端小工具后续, Go, 工具, 终端, 小工具, 开发, 编程, 命令, 工具开发, 代码实现, 运行命令,GO开发IP过滤小脚本, go, 工具, go开发ip过滤, go ip过滤脚本, go ip过滤,Go 开发终端小工具, golang, 工具, 开发, 编程, 终端, 天气查询, 手机归属地查询, cobra库, 命令行小工具,Go语言的高性能User-Agent解析库, golang, 工具, User-Agent解析, 性能测试, 解析库,golang, 地址生成, 扩展包, 地理位置, 中国地址, 地址生成工具, 地址数据, 地址库,Gomail邮件发送包, golang, 工具, 邮件发送, 邮件接收, 邮件发送包, 邮件发送工具,Go语言安全库使用指南, Go语言, 安全库, 使用指南, crypto, encoding, hash, math, rand, strconv, time,Go, URL检测, 工具, 编程, 终端命令, 开发, 检测, 小工具, 终端命令小工具, Go终端命令小工具,Go语言实现守护进程, 守护进程, 技术详解, Go语言, 进程管理, 关键技术点,Go, 并发, 模式, 编程, 并发编程, Go语言, 并发模式, 并发实战, 并发指南,go:embed 在 Go 开发中的应用与最佳实践, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向","description":"详细介绍pyenv这款强大的Python版本管理工具，包括安装配置、版本切换、虚拟环境管理等核心功能，帮助开发者轻松管理多个Python版本。"},"headers":[],"relativePath":"python/Python版本管理神器之pyenv.md","filePath":"python/Python版本管理神器之pyenv.md","lastUpdated":1741944848000}'),t={name:"python/Python版本管理神器之pyenv.md"};function l(i,a,o,c,h,d){return e(),n("div",{"data-pagefind-body":!0},a[0]||(a[0]=[p(`<h1 id="python版本管理神器之pyenv-最佳python版本管理工具" tabindex="-1">Python版本管理神器之pyenv - 最佳Python版本管理工具 <a class="header-anchor" href="#python版本管理神器之pyenv-最佳python版本管理工具" aria-label="Permalink to &quot;Python版本管理神器之pyenv - 最佳Python版本管理工具&quot;">​</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>之前一直在用 virtualenv 和 virtualenvwrapper 这两个工具管理 Python 虚拟环境，但是有个问题，就是想要创建指定版本的虚拟环境就必须先安装指定的 Python 版本，比如我想创建一个基于 Python3.6 的虚拟环境，那么我首先得安装 Python3.6（不管是直接安装还是源码安装，总之比较麻烦），然后在基于安装好的版本去创建虚拟环境，自从知道了 pyenv 这个神器之后，就几乎不用上述工具了。 ～ pyenv 好像对 Windows 平台不太友好。</p><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><blockquote><p>GitHub <a href="https://github.com/pyenv/pyenv" target="_blank" rel="noreferrer">https://github.com/pyenv/pyenv</a></p></blockquote><h3 id="ubuntu安装" tabindex="-1">Ubuntu安装 <a class="header-anchor" href="#ubuntu安装" aria-label="Permalink to &quot;Ubuntu安装&quot;">​</a></h3><h4 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h4><ul><li>方式一（速度慢）：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    git clone https://github.com/yyuu/pyenv.git ~/.pyenv</span></span></code></pre></div><ul><li>方式二（速度快）：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash</span></span></code></pre></div><p>执行上述操作之后，会将 pyenv 安装到当前用户的 ～/.pyenv 目录下</p><h4 id="编辑-bashrc-文件" tabindex="-1">编辑 .bashrc 文件 <a class="header-anchor" href="#编辑-bashrc-文件" aria-label="Permalink to &quot;编辑 .bashrc 文件&quot;">​</a></h4><ol><li>打开 .bascrc 文件</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vim ~/.bashrc</span></span></code></pre></div><p>2 .将一下内容复制到末尾</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export PYENV_ROOT=/root/.pyenv</span></span>
<span class="line"><span>export PATH=$PYENV_ROOT/bin:$PATH</span></span>
<span class="line"><span>export PATH=$PYENV_ROOT/shims:$PATH</span></span>
<span class="line"><span>eval &quot;$(pyenv init -)&quot;</span></span></code></pre></div><p>3.更新 .bashrc 文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>source ~/.bashrc</span></span></code></pre></div><h4 id="安装-python-依赖" tabindex="-1">安装 Python 依赖 <a class="header-anchor" href="#安装-python-依赖" aria-label="Permalink to &quot;安装 Python 依赖&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install make build-essential libssl-dev zlib1g-dev</span></span>
<span class="line"><span>sudo apt-get install libbz2-dev libreadline-dev libsqlite3-dev wget curl</span></span>
<span class="line"><span>sudo apt-get install llvm libncurses5-dev libncursesw5-dev</span></span>
<span class="line"><span>sudo apt-get update</span></span></code></pre></div><h4 id="测试使用" tabindex="-1">测试使用 <a class="header-anchor" href="#测试使用" aria-label="Permalink to &quot;测试使用&quot;">​</a></h4><p>查看是否安装成功</p><ul><li>查看当前安装版本</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IN:</span></span>
<span class="line"><span>	pyenv --version</span></span>
<span class="line"><span>OUT:</span></span>
<span class="line"><span>	pyenv 1.2.27-34-gbba1289e</span></span></code></pre></div><ul><li>查看当前所有 Python 版本</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IN:</span></span>
<span class="line"><span>	pyenv versions</span></span>
<span class="line"><span>OUT:</span></span>
<span class="line"><span>	* system (set by /root/.pyenv/version)</span></span></code></pre></div><blockquote><p>表示当前只有系统默认的版本</p></blockquote><h4 id="安装-python-指定版本" tabindex="-1">安装 Python 指定版本 <a class="header-anchor" href="#安装-python-指定版本" aria-label="Permalink to &quot;安装 Python 指定版本&quot;">​</a></h4><ul><li>查看当前所有可安装版本</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    pyenv install --list</span></span></code></pre></div><ul><li>安装想要安装的版本（这里选择 Python3.6.5）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IN:</span></span>
<span class="line"><span>	pyenv install 3.6.5</span></span>
<span class="line"><span>OUT:</span></span>
<span class="line"><span>  Downloading Python-3.6.5.tar.xz...</span></span>
<span class="line"><span>  -&gt; https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tar.xz</span></span>
<span class="line"><span>  Installing Python-3.6.5...</span></span>
<span class="line"><span>  Installed Python-3.6.5 to /root/.pyenv/versions/3.6.5</span></span></code></pre></div><ul><li>再次查看所有 Python 版本</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IN:</span></span>
<span class="line"><span>	pyenv versions</span></span>
<span class="line"><span>OUT:</span></span>
<span class="line"><span>  * system (set by /root/.pyenv/version)</span></span>
<span class="line"><span>    3.6.5</span></span></code></pre></div><ul><li><p>切换 Python 版本</p><p>有三种切换方式 glocal local shell*</p><p>glocal 全局环境，在未再次使用 glocal切换环境之前，一直使用此环境。</p><p>local 本次登录环境，重启后，则环境失效，并返回当前glocal的环境。</p><p>shell 局部（临时）环境。关闭命令行窗口，则环境失效，并返回当前glocal的环境。</p><p>pyenv glocal 3.6.5</p></li><li><p>卸载指定版本</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    pyenv uninstall 3.6.5</span></span></code></pre></div><h3 id="安装-virtualenv" tabindex="-1">安装 virtualenv <a class="header-anchor" href="#安装-virtualenv" aria-label="Permalink to &quot;安装 virtualenv&quot;">​</a></h3><ul><li>下载</li></ul><blockquote><p>pyenv 已经帮我们以 plugin 的形式安装好了，如果未安装，则需要我们手动安装一下</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span></span></code></pre></div><ul><li>编辑 .bashrc 文件</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    vim ~/.bashrc</span></span></code></pre></div><ul><li>将以下内容复制到末尾</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    eval &quot;$(pyenv virtualenv-init -)&quot;</span></span></code></pre></div><ul><li>更新 .bashrc 文件</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    source ~/.bashrc</span></span></code></pre></div><h3 id="创建虚拟环境" tabindex="-1">创建虚拟环境 <a class="header-anchor" href="#创建虚拟环境" aria-label="Permalink to &quot;创建虚拟环境&quot;">​</a></h3><ul><li><p>使用说明： pyenv virtualenv 3.6.5 virtual_name(自定义虚拟环境名)</p></li><li><p>实际使用：pyenv virtualenv 3.6.5 test</p></li><li><p>进入虚拟环境</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   pyenv activate test</span></span></code></pre></div><ul><li>退出虚拟环境</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   pyenv deactivate</span></span></code></pre></div><ul><li>删除虚拟环境</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    pyenv uninstall test</span></span></code></pre></div><p>输入yes即可</p><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><p>使用方式: pyenv &lt;命令&gt; [&lt;参数&gt;]</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>命令:</span></span>
<span class="line"><span>  commands    查看所有命令</span></span>
<span class="line"><span>  local       设置或显示本地的 Python 版本（当前目录及其子目录）</span></span>
<span class="line"><span>  global      设置或显示全局 Python 版本</span></span>
<span class="line"><span>  shell       设置或显示 shell 指定的 Python 版本（本次会话）</span></span>
<span class="line"><span>  install     安装指定 Python 版本</span></span>
<span class="line"><span>  uninstall   卸载指定 Python 版本</span></span>
<span class="line"><span>  version     显示当前的 Python 版本及其本地路径</span></span>
<span class="line"><span>  versions    查看所有已经安装的版本</span></span>
<span class="line"><span>  which       显示安装路径</span></span></code></pre></div><h3 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h3><p>1.切换不成功 如果遇到切换之后，Python版本还是系统的默认版本的话，就需要配置一下环境变量，在 ~/.zshrc 或 ~/.bash_profile 文件最后写入：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if which pyenv &gt; /dev/null;</span></span>
<span class="line"><span>  then eval &quot;$(pyenv init -)&quot;;</span></span>
<span class="line"><span>fi</span></span></code></pre></div><hr>`,62)]))}const g=s(t,[["render",l]]);export{u as __pageData,g as default};
