import{_ as s,c as a,o as l,a6 as t}from"./chunks/framework.BgU7Y2dv.js";const E=JSON.parse('{"title":"Wails 教程系列 - 简介","description":"专为资深 Golang 开发者设计的 Wails 桌面应用开发教程，涵盖架构设计、性能优化、系统集成等高级主题。","frontmatter":{"title":"Wails 教程系列 - 简介","date":"2025-08-22T00:00:00.000Z","author":"PFinalClub","description":"专为资深 Golang 开发者设计的 Wails 桌面应用开发教程，涵盖架构设计、性能优化、系统集成等高级主题。","head":[["meta",{"name":"keywords","content":"pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向"}]]},"headers":[],"relativePath":"zh/wails-tutorial-series/index.md","filePath":"zh/wails-tutorial-series/index.md","lastUpdated":1755834429000}'),n={name:"zh/wails-tutorial-series/index.md"};function h(e,i,p,r,k,d){return l(),a("div",{"data-pagefind-body":!0},i[0]||(i[0]=[t(`<h1 id="wails-教程系列-简介" tabindex="-1">Wails 教程系列 - 简介 <a class="header-anchor" href="#wails-教程系列-简介" aria-label="Permalink to &quot;Wails 教程系列 - 简介&quot;">​</a></h1><p>嘿，Go 开发者们！如果你已经玩转了 Go 语言，想要把技能扩展到桌面应用开发，那这个 Wails 教程系列就是为你准备的。</p><h2 id="什么是-wails" tabindex="-1">什么是 Wails？ <a class="header-anchor" href="#什么是-wails" aria-label="Permalink to &quot;什么是 Wails？&quot;">​</a></h2><p>简单来说，Wails 就是让你用 Go 语言写桌面应用的框架。它把 Go 的高性能后端和现代 Web 技术的前端完美结合。不像 Electron 那样打包整个浏览器，Wails 直接使用系统自带的 WebView，所以应用更轻量、启动更快。</p><h3 id="为什么选择-wails" tabindex="-1">为什么选择 Wails？ <a class="header-anchor" href="#为什么选择-wails" aria-label="Permalink to &quot;为什么选择 Wails？&quot;">​</a></h3><ul><li><strong>轻量</strong>：内存占用比 Electron 少 60-80%</li><li><strong>快速</strong>：启动速度比 Electron 快 3-5 倍</li><li><strong>原生</strong>：直接调用系统 WebView，没有浏览器引擎的包袱</li><li><strong>Go 友好</strong>：你可以继续用熟悉的 Go 标准库和并发模式</li></ul><h2 id="wails-是怎么工作的" tabindex="-1">Wails 是怎么工作的？ <a class="header-anchor" href="#wails-是怎么工作的" aria-label="Permalink to &quot;Wails 是怎么工作的？&quot;">​</a></h2><p>根据 <a href="https://wails.golang.ac.cn/docs/howdoesitwork/" target="_blank" rel="noreferrer">官方文档</a>，Wails 应用其实就是一个标准的 Go 程序，只不过带了个 WebKit 前端窗口。</p><h3 id="核心组件" tabindex="-1">核心组件 <a class="header-anchor" href="#核心组件" aria-label="Permalink to &quot;核心组件&quot;">​</a></h3><ol><li><strong>Go 后端</strong>：你的业务逻辑、数据处理、系统调用都在这里</li><li><strong>WebKit 前端</strong>：用户界面，用 HTML/CSS/JavaScript 写</li><li><strong>绑定系统</strong>：让前端能直接调用 Go 的方法</li></ol><h3 id="关键技术" tabindex="-1">关键技术 <a class="header-anchor" href="#关键技术" aria-label="Permalink to &quot;关键技术&quot;">​</a></h3><h4 id="资产管理" tabindex="-1">资产管理 <a class="header-anchor" href="#资产管理" aria-label="Permalink to &quot;资产管理&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//go:embed all:frontend/dist</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assets </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FS</span></span></code></pre></div><p>开发时从磁盘加载（支持热重载），打包后直接嵌入到二进制文件里，一个文件搞定。</p><h4 id="方法绑定" tabindex="-1">方法绑定 <a class="header-anchor" href="#方法绑定" aria-label="Permalink to &quot;方法绑定&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 绑定到前端</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wails.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Bind: []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        app,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>前端调用就像调用普通 JavaScript 函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Greet } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../wailsjs/go/main/App&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Hello World!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="复杂数据传递" tabindex="-1">复杂数据传递 <a class="header-anchor" href="#复杂数据传递" aria-label="Permalink to &quot;复杂数据传递&quot;">​</a></h4><p>Wails 支持在 Go 和 JavaScript 之间传递复杂对象：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;name&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Age  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`json:&quot;age&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;address&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> (Age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p.Name, p.Age)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>会自动生成 TypeScript 类型定义，保证类型安全。</p><h4 id="运行时-api" tabindex="-1">运行时 API <a class="header-anchor" href="#运行时-api" aria-label="Permalink to &quot;运行时 API&quot;">​</a></h4><p>前端可以直接调用系统功能：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventsEmit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-event&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 改窗口标题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowSetTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New Title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="为什么-go-开发者需要-wails" tabindex="-1">为什么 Go 开发者需要 Wails？ <a class="header-anchor" href="#为什么-go-开发者需要-wails" aria-label="Permalink to &quot;为什么 Go 开发者需要 Wails？&quot;">​</a></h2><h3 id="技术栈复用" tabindex="-1">技术栈复用 <a class="header-anchor" href="#技术栈复用" aria-label="Permalink to &quot;技术栈复用&quot;">​</a></h3><ul><li>现有的 Go 代码可以直接用</li><li>熟悉的 <code>net/http</code>、<code>database/sql</code>、<code>encoding/json</code> 等包</li><li>goroutine 和 channel 在桌面应用里一样强大</li></ul><h3 id="性能优势" tabindex="-1">性能优势 <a class="header-anchor" href="#性能优势" aria-label="Permalink to &quot;性能优势&quot;">​</a></h3><ul><li>启动快：通常比 Electron 快 3-5 倍</li><li>内存少：20-50MB vs Electron 的 100-200MB</li><li>CPU 友好：更低的系统资源消耗</li></ul><h3 id="开发体验" tabindex="-1">开发体验 <a class="header-anchor" href="#开发体验" aria-label="Permalink to &quot;开发体验&quot;">​</a></h3><ul><li>热重载：<code>wails dev</code> 实时更新</li><li>调试方便：支持 Go 调试器和浏览器开发者工具</li><li>一键打包：<code>wails build</code> 生成可执行文件</li></ul><h2 id="教程大纲" tabindex="-1">教程大纲 <a class="header-anchor" href="#教程大纲" aria-label="Permalink to &quot;教程大纲&quot;">​</a></h2><h3 id="第一阶段-基础架构" tabindex="-1">第一阶段：基础架构 <a class="header-anchor" href="#第一阶段-基础架构" aria-label="Permalink to &quot;第一阶段：基础架构&quot;">​</a></h3><ol><li><p><strong>Wails 架构解析</strong></p><ul><li>WebView 集成原理</li><li>Go 与前端通信机制</li><li>内存管理和优化</li><li>与 Electron、Tauri 对比</li></ul></li><li><p><strong>项目结构设计</strong></p><ul><li>企业级项目组织</li><li>Go modules 最佳实践</li><li>前后端代码分离</li><li>环境配置管理</li></ul></li><li><p><strong>通信机制详解</strong></p><ul><li>方法绑定原理</li><li>事件驱动架构</li><li>异步处理模式</li><li>错误处理机制</li></ul></li></ol><h3 id="第二阶段-高级开发" tabindex="-1">第二阶段：高级开发 <a class="header-anchor" href="#第二阶段-高级开发" aria-label="Permalink to &quot;第二阶段：高级开发&quot;">​</a></h3><ol start="4"><li><p><strong>Go 后端开发</strong></p><ul><li>高性能数据处理</li><li>系统 API 调用</li><li>数据库集成</li><li>缓存和优化</li></ul></li><li><p><strong>前端架构</strong></p><ul><li>Vue 3/React 深度集成</li><li>状态管理（Pinia/Redux）</li><li>组件化设计</li><li>性能优化</li></ul></li><li><p><strong>系统集成</strong></p><ul><li>系统托盘和菜单</li><li>文件系统操作</li><li>网络和 API</li><li>硬件信息获取</li></ul></li></ol><h3 id="第三阶段-企业级应用" tabindex="-1">第三阶段：企业级应用 <a class="header-anchor" href="#第三阶段-企业级应用" aria-label="Permalink to &quot;第三阶段：企业级应用&quot;">​</a></h3><ol start="7"><li><p><strong>安全与权限</strong></p><ul><li>代码签名</li><li>权限模型</li><li>数据加密</li><li>网络安全</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>内存泄漏检测</li><li>CPU/内存优化</li><li>启动时间优化</li><li>监控和日志</li></ul></li><li><p><strong>构建部署</strong></p><ul><li>多平台构建</li><li>CI/CD 流水线</li><li>应用更新</li><li>应用商店发布</li></ul></li></ol><h3 id="第四阶段-实战项目" tabindex="-1">第四阶段：实战项目 <a class="header-anchor" href="#第四阶段-实战项目" aria-label="Permalink to &quot;第四阶段：实战项目&quot;">​</a></h3><ol start="10"><li><p><strong>系统监控工具</strong></p><ul><li>需求分析</li><li>数据采集</li><li>实时可视化</li><li>告警系统</li></ul></li><li><p><strong>生态实践</strong></p><ul><li>插件开发</li><li>社区工具</li><li>性能测试</li><li>问题解决</li></ul></li></ol><h2 id="技术特色" tabindex="-1">技术特色 <a class="header-anchor" href="#技术特色" aria-label="Permalink to &quot;技术特色&quot;">​</a></h2><h3 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h3><ul><li>前后端分离：职责清晰，易于维护</li><li>事件驱动：基于 Go channel 的事件系统</li><li>依赖注入：Go 接口的优雅应用</li><li>模块化：松耦合，高内聚</li></ul><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><ul><li>内存池：减少 GC 压力</li><li>并发控制：goroutine 池和限流</li><li>缓存策略：多级缓存</li><li>资源管理：连接池和句柄管理</li></ul><h3 id="开发工具" tabindex="-1">开发工具 <a class="header-anchor" href="#开发工具" aria-label="Permalink to &quot;开发工具&quot;">​</a></h3><ul><li>代码生成：自动生成绑定代码</li><li>热重载：开发效率神器</li><li>调试工具：Go 调试器 + 浏览器工具</li><li>构建优化：增量编译</li></ul><h3 id="wails-独有优势" tabindex="-1">Wails 独有优势 <a class="header-anchor" href="#wails-独有优势" aria-label="Permalink to &quot;Wails 独有优势&quot;">​</a></h3><h4 id="_1-智能资产管理" tabindex="-1">1. 智能资产管理 <a class="header-anchor" href="#_1-智能资产管理" aria-label="Permalink to &quot;1. 智能资产管理&quot;">​</a></h4><ul><li>开发模式：磁盘加载，热重载</li><li>生产模式：嵌入二进制，零依赖</li><li>自动检测：找到 index.html 目录</li><li>单文件分发：一个 exe 搞定</li></ul><h4 id="_2-类型安全调用" tabindex="-1">2. 类型安全调用 <a class="header-anchor" href="#_2-类型安全调用" aria-label="Permalink to &quot;2. 类型安全调用&quot;">​</a></h4><ul><li>自动生成 TypeScript 类型</li><li>JSON 序列化复杂对象</li><li>Go 错误转 JavaScript Promise</li><li>编译时类型检查</li></ul><h4 id="_3-生命周期管理" tabindex="-1">3. 生命周期管理 <a class="header-anchor" href="#_3-生命周期管理" aria-label="Permalink to &quot;3. 生命周期管理&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wails.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OnStartup:  app.startup,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OnDomReady: app.domReady,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DOM 准备好时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OnBeforeClose: app.beforeClose, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 关闭前</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OnShutdown: app.shutdown,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 关闭时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="_4-运行时-api" tabindex="-1">4. 运行时 API <a class="header-anchor" href="#_4-运行时-api" aria-label="Permalink to &quot;4. 运行时 API&quot;">​</a></h4><ul><li>事件系统：自定义事件通信</li><li>窗口控制：动态调整窗口</li><li>系统集成：剪贴板、通知、菜单</li><li>日志系统：统一日志记录</li></ul><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><h3 id="企业工具" tabindex="-1">企业工具 <a class="header-anchor" href="#企业工具" aria-label="Permalink to &quot;企业工具&quot;">​</a></h3><ul><li>内部工具：运维工具、数据分析</li><li>客户端：API 客户端、配置管理</li><li>监控面板：系统监控、业务监控</li></ul><h3 id="开发者工具" tabindex="-1">开发者工具 <a class="header-anchor" href="#开发者工具" aria-label="Permalink to &quot;开发者工具&quot;">​</a></h3><ul><li>代码编辑器：轻量级 IDE</li><li>调试工具：网络调试、性能分析</li><li>构建工具：CI/CD 客户端</li></ul><h3 id="桌面应用" tabindex="-1">桌面应用 <a class="header-anchor" href="#桌面应用" aria-label="Permalink to &quot;桌面应用&quot;">​</a></h3><ul><li>文件管理：高级文件操作</li><li>媒体应用：音视频处理</li><li>办公工具：文档处理、格式转换</li></ul><h2 id="学习路径" tabindex="-1">学习路径 <a class="header-anchor" href="#学习路径" aria-label="Permalink to &quot;学习路径&quot;">​</a></h2><h3 id="快速上手-1-2-周" tabindex="-1">快速上手（1-2 周） <a class="header-anchor" href="#快速上手-1-2-周" aria-label="Permalink to &quot;快速上手（1-2 周）&quot;">​</a></h3><ol><li>环境搭建，第一个应用</li><li>核心概念，基础交互</li><li>简单项目实践</li></ol><h3 id="深度掌握-1-2-月" tabindex="-1">深度掌握（1-2 月） <a class="header-anchor" href="#深度掌握-1-2-月" aria-label="Permalink to &quot;深度掌握（1-2 月）&quot;">​</a></h3><ol><li>高级功能，系统集成</li><li>性能优化，最佳实践</li><li>复杂项目实战</li></ol><h3 id="专家级-3-6-月" tabindex="-1">专家级（3-6 月） <a class="header-anchor" href="#专家级-3-6-月" aria-label="Permalink to &quot;专家级（3-6 月）&quot;">​</a></h3><ol><li>企业级架构设计</li><li>性能调优，监控系统</li><li>社区贡献，插件开发</li></ol><h2 id="技术对比" tabindex="-1">技术对比 <a class="header-anchor" href="#技术对比" aria-label="Permalink to &quot;技术对比&quot;">​</a></h2><h3 id="wails-vs-electron" tabindex="-1">Wails vs Electron <a class="header-anchor" href="#wails-vs-electron" aria-label="Permalink to &quot;Wails vs Electron&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>Wails</th><th>Electron</th></tr></thead><tbody><tr><td>内存</td><td>20-50MB</td><td>100-200MB</td></tr><tr><td>启动</td><td>快 3-5 倍</td><td>较慢</td></tr><tr><td>包大小</td><td>10-30MB</td><td>50-150MB</td></tr><tr><td>语言</td><td>Go + Web</td><td>JS/TS</td></tr><tr><td>性能</td><td>原生</td><td>浏览器</td></tr><tr><td>学习</td><td>Go 友好</td><td>Web 友好</td></tr></tbody></table><h3 id="wails-vs-tauri" tabindex="-1">Wails vs Tauri <a class="header-anchor" href="#wails-vs-tauri" aria-label="Permalink to &quot;Wails vs Tauri&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>Wails</th><th>Tauri</th></tr></thead><tbody><tr><td>后端</td><td>Go</td><td>Rust</td></tr><tr><td>前端</td><td>所有 Web</td><td>所有 Web</td></tr><tr><td>生态</td><td>成熟</td><td>新兴</td></tr><tr><td>性能</td><td>优秀</td><td>优秀</td></tr><tr><td>社区</td><td>活跃</td><td>快速增长</td></tr></tbody></table><hr><p>如果你已经准备好把 Go 语言的强大能力带到桌面应用领域，这个系列会给你完整的路径。基于官方文档的技术深度，我们会深入探讨每个核心概念的实际应用。开始你的 Wails 之旅吧！</p>`,78)]))}const g=s(n,[["render",h]]);export{E as __pageData,g as default};
