import{_ as i,c as a,o as s,a6 as t}from"./chunks/framework.BLq2o8be.js";const k=JSON.parse('{"title":"Reverse Engineering JS Webpack Tips for Crawlers","description":"Tips for reverse engineering JS Webpack for crawlers","frontmatter":{"title":"Reverse Engineering JS Webpack Tips for Crawlers","date":"2023-05-15T10:14:02.000Z","tags":["crawler","python","Webpack"],"description":"Tips for reverse engineering JS Webpack for crawlers","author":"PFinal南丞","keywords":"Reverse Engineering JS Webpack Tips for Crawlers, crawler, JS, Webpack","head":[["meta",{"name":"keywords","content":"Reverse Engineering JS Webpack Tips for Crawlers, crawler, JS, Webpack,pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向"}]]},"headers":[],"relativePath":"Python/Reverse-Engineering-JS-Webpack-Tips-for-Crawlers.md","filePath":"Python/Reverse-Engineering-JS-Webpack-Tips-for-Crawlers.md","lastUpdated":1752111561000}'),n={name:"Python/Reverse-Engineering-JS-Webpack-Tips-for-Crawlers.md"};function r(o,e,l,p,h,c){return s(),a("div",{"data-pagefind-body":!0},e[0]||(e[0]=[t(`<h1 id="reverse-engineering-js-webpack-tips-for-crawlers" tabindex="-1">Reverse Engineering JS Webpack Tips for Crawlers <a class="header-anchor" href="#reverse-engineering-js-webpack-tips-for-crawlers" aria-label="Permalink to &quot;Reverse Engineering JS Webpack Tips for Crawlers&quot;">​</a></h1><h2 id="concept" tabindex="-1">Concept: <a class="header-anchor" href="#concept" aria-label="Permalink to &quot;Concept:&quot;">​</a></h2><p>webpack is a static module bundler for modern JavaScript applications. When webpack processes an application, it internally builds a dependency graph from one or more entry points and then combines every module your project needs into one or more bundles. All resources are rendered via JavaScript.</p><h2 id="identification" tabindex="-1">Identification: <a class="header-anchor" href="#identification" aria-label="Permalink to &quot;Identification:&quot;">​</a></h2><ol><li>As shown below:</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305151419884.png" alt=""></p><blockquote><p>When viewing the page source code, most are constructed by script tags</p></blockquote><ol start="2"><li>As shown:</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305160910831.png" alt=""></p><blockquote><p>Most webpack builds can find the webpack JS file</p></blockquote><h2 id="structure" tabindex="-1">Structure: <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure:&quot;">​</a></h2><p>The structure of JS after webpack packaging is basically as follows:</p><h3 id="first-type" tabindex="-1">First type: <a class="header-anchor" href="#first-type" aria-label="Permalink to &quot;First type:&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305160951192.png" alt=""></p><p>As shown:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modules are stored as arrays, each element is a function</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This function is called the loader or distributor, all modules are loaded and executed from this function.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the loader to call the first module</span></span></code></pre></div><h3 id="second-type" tabindex="-1">Second type <a class="header-anchor" href="#second-type" aria-label="Permalink to &quot;Second type&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305160944584.png" alt=""></p><p>As shown:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modules are stored as objects, elements are function objects</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This function is called the loader or distributor, all modules are loaded and executed from this function.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1x2y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the loader to execute 1x2y</span></span></code></pre></div><h3 id="third-type" tabindex="-1">Third type <a class="header-anchor" href="#third-type" aria-label="Permalink to &quot;Third type&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161006212.png" alt=""></p><p><strong>As shown above, the third type is also the most common. If there are many modules, they will be packaged into JS files, then a global variable window[&quot;webpackJsonp&quot;] = [ ] is defined, which is used to store modules that need to be dynamically imported, then the push() method of window[&quot;webpackJsonp&quot;] is rewritten as webpackJsonpCallback(), that is, window[&quot;webpackJsonp&quot;].push() actually executes webpackJsonpCallback(). window[&quot;webpackJsonp&quot;].push() receives three parameters, the first is the module ID, the second is an array or object defining many functions, and the third is the function to call (optional).</strong></p><p>Each JS module file starts with</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.webpackJsonp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.webpackJsonp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],{}]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2 is the module id, {} contains the function object to call</span></span></code></pre></div><h2 id="reverse-engineering-js-extraction-ideas-1" tabindex="-1">Reverse Engineering JS Extraction Ideas (1) <a class="header-anchor" href="#reverse-engineering-js-extraction-ideas-1" aria-label="Permalink to &quot;Reverse Engineering JS Extraction Ideas (1)&quot;">​</a></h2><ol><li>First, find the encryption parameter entry</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161020050.png" alt=""></p><p>As shown above, the encryption parameter is <em>sign</em></p><ol start="2"><li>Find the loader function</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161035140.png" alt=""></p><blockquote><p>As shown above, find a call like <strong>n(&#39;xx&#39;)</strong> to load the module, then set a breakpoint and refresh the page. When the mouse moves over, you can basically find the loader function, as shown below:</p></blockquote><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161038581.png" alt=""></p><ol start="3"><li><p>Set a breakpoint on the call() or apply() method in the loader function, extract the module containing the encryption function and related modules together.</p></li><li><p>Export the encryption parameter as a global variable</p></li></ol><h2 id="reverse-engineering-js-extraction-ideas-2" tabindex="-1">Reverse Engineering JS Extraction Ideas (2) <a class="header-anchor" href="#reverse-engineering-js-extraction-ideas-2" aria-label="Permalink to &quot;Reverse Engineering JS Extraction Ideas (2)&quot;">​</a></h2><ol><li>Find the encryption parameter function entry and determine which module the encryption function is in.</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161044042.png" alt=""></p><ol start="2"><li>Find the encryption module and extract it</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161050194.png" alt=""></p><p>As shown above, the m function&#39;s module loads other modules in turn, and you can find the encryption module as shown below</p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161052841.png" alt=""></p><ol start="3"><li>Iteratively extract code locally, then fix any missing functions or parameters as needed</li></ol><p>After extracting the above encryption module, start to fix other missing functions and parameters, then you can try it out</p><blockquote><p>Note: Set two breakpoints after the encryption function (method), after the encryption function (method) is paused, step into the loader function, then set a breakpoint after the loader (similar to return e[n].call(r.exports, r, r.exports, d)), jump to the breakpoint after the loader, enter the HooK function in the console (modify the HooK function code according to different loader functions), remove the breakpoint after the loader, jump to the breakpoint after the encryption function (method), and enter window._wbpk in the console to get all module code related to the encryption function.</p></blockquote><h3 id="other-ideas-are-being-updated" tabindex="-1">Other ideas are being updated... <a class="header-anchor" href="#other-ideas-are-being-updated" aria-label="Permalink to &quot;Other ideas are being updated...&quot;">​</a></h3>`,47)]))}const g=i(n,[["render",r]]);export{k as __pageData,g as default};
