import{_ as s,c as a,o as p,a6 as e}from"./chunks/framework.B5rgnJXo.js";const d=JSON.parse('{"title":"Nginx配置文件详解","description":"Nginx配置文件详解","frontmatter":{"title":"Nginx配置文件详解","date":"2023-04-27T22:10:20.000Z","author":"PFinal南丞","tags":["Nginx"],"description":"Nginx配置文件详解","keywords":"Nginx, 配置文件, 详解, 配置, Nginx配置文件详解, Nginx配置文件详解,PHP-FPM配置文件解析, php, 工具, php-fpm配置文件, php-fpm配置文件解析, php-fpm配置文件详解,PHP异步处理, php, 工具, php异步处理, php协程, php异步协程,PHP, 进程, 线程, 解析, PHP进程, PHP线程, PHP进程线程, PHP进程线程解析, PHP进程线程解析,PHP, 配置文件, 详解, 编程, web开发, 服务器配置,PHP钩子, php, 工具, php钩子, php钩子应用, php钩子的实现,Redis, 基本知识, 总结, 数据库, NoSQL, 缓存, 计数器, 排行榜, 社交网络, 消息队列, 分布式锁,Redis配置文件详解, 数据库, redis,TCP/IP,HTTP,Python, 库, 函数, 常用, Faker, 生成, 数据, 测试, 模拟,Python, 协程, 并发, 编程, asyncio, 异步IO, Future, Task,Python, 网站, 搜集, 资源, 开发, 编程, 工具, 镜像站, 爬虫,Python版本管理神器之pyenv, python, 工具, python版本管理, pyenv使用教程, python环境配置,爬虫JS逆向Webpack技巧记录, 爬虫, JS, Webpack,爬虫, 加密, 解密, 算法, 特征, 收集,爬虫, 加密, 解密, 算法, 特征, 收集,Composer, 配置文件, 依赖管理, 包管理, 版本控制,PHP, 进程, 线程, 解析, PHP进程, PHP线程, PHP进程线程, PHP进程线程解析, PHP进程线程解析,PHP, $_SERVER,PHP, 会话, 引发, Bug, PHP_SESSION, $_SESSION, 会话管理,PHP, 错误与异常处理, 异常, 错误, 处理, 异常处理, 错误处理, 程序, 健壮性, 稳定性,PHP, 生成器, 解析, PHP生成器, PHP生成器解析, PHP生成器解析,golang, gopsutil, 系统库, 监控, 系统信息, 进程, 进程监控, 系统信息获取,使用Go实现服务端事件推送SSE, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,用Wails和Vue.js打造跨平台桌面应用程序, Wails, Vue.js, 跨平台桌面应用程序, 抖音, 直播,基于Wails的Mac桌面应用开发, golang, Wails, 桌面应用, 开发,基于Wails的抖音直播工具, golang, Wails, 抖音, 直播, 工具, 桌面应用,golang, 游戏开发, 接口设计, 高性能, 高并发, 游戏服务器, 游戏接口, 游戏框架,Wails, 应用, 开发, 尝试, 桌面应用, Go, Web开发, Tailwindcss, sqlite,Go-Cache, Wails, 内存缓存, 性能优化, 缓存策略, 内存管理, 应用程序性能,golang, 工具, 提升生产力, 开发, golang, Go开发, Go工具, Go扩展包,提速利器：使用Go语言实现静态化API, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,深入Go内存分配, golang, 内存分配,Go Channel, 批量读取, 实际应用,Laravel, 构建, 手工, 框架, 手工构建, PHP,Laravel, Carbon, 类, 使用, Laravel-Carbon-类使用, Laravel-Carbon-类使用解析,Golang, Web应用, 安全指南, 输入验证, 输出编码, 会话管理, 文件上传, 跨站脚本攻击, SQL注入, 密码存储, 身份验证, 授权, 安全配置, 日志记录, 错误处理, 性能优化, 安全审计,golang, TLS, SSL, 网络安全, 传输层安全协议, 安全套接层, 加密, 数据传输, 网络通信,Golang, 协程池, 实现, 方法, 协程, 池, 概念, 应用, 场景, 实现方式, 协程池功能, 性能, 响应速度,golang, 脱敏扩展包：简化敏感信息处理的利器, 工具, golang扩展包, golang脱敏, golang脱敏工具,Golang, 工具, 效率, 提升, 小工具, 代码质量, 开发, 编程, 工具, 自动格式化, 自动导入, 代码补全,undefined,AutoCorrent专有名词大小写扩展包, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Create Go App CLI, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Go语言开发终端小工具后续, Go, 工具, 终端, 小工具, 开发, 编程, 命令, 工具开发, 代码实现, 运行命令,GO开发IP过滤小脚本, go, 工具, go开发ip过滤, go ip过滤脚本, go ip过滤,Go 开发终端小工具, golang, 工具, 开发, 编程, 终端, 天气查询, 手机归属地查询, cobra库, 命令行小工具,Go语言的高性能User-Agent解析库, golang, 工具, User-Agent解析, 性能测试, 解析库,golang, 地址生成, 扩展包, 地理位置, 中国地址, 地址生成工具, 地址数据, 地址库,Gomail邮件发送包, golang, 工具, 邮件发送, 邮件接收, 邮件发送包, 邮件发送工具,Go语言安全库使用指南, Go语言, 安全库, 使用指南, crypto, encoding, hash, math, rand, strconv, time,Go, URL检测, 工具, 编程, 终端命令, 开发, 检测, 小工具, 终端命令小工具, Go终端命令小工具,Go语言实现守护进程, 守护进程, 技术详解, Go语言, 进程管理, 关键技术点,Go, 并发, 模式, 编程, 并发编程, Go语言, 并发模式, 并发实战, 并发指南,go:embed 在 Go 开发中的应用与最佳实践, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向"},"headers":[],"relativePath":"工具/Nginx配置文件详解.md","filePath":"工具/Nginx配置文件详解.md","lastUpdated":1741950068000}'),l={name:"工具/Nginx配置文件详解.md"};function i(c,n,o,t,r,_){return p(),a("div",{"data-pagefind-body":!0},n[0]||(n[0]=[e(`<h1 id="nginx配置文件详解" tabindex="-1">Nginx配置文件详解 <a class="header-anchor" href="#nginx配置文件详解" aria-label="Permalink to &quot;Nginx配置文件详解&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#定义Nginx运行的用户和用户组</span></span>
<span class="line"><span>user www www;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#nginx进程数，建议设置为等于CPU总核心数。</span></span>
<span class="line"><span>worker_processes 8;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span>
<span class="line"><span>error_log /var/log/nginx/error.log info;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#进程文件</span></span>
<span class="line"><span>pid /var/run/nginx.pid;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span></span>
<span class="line"><span>worker_rlimit_nofile 65535;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#工作模式与连接数上限</span></span>
<span class="line"><span>events</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</span></span>
<span class="line"><span>use epoll;</span></span>
<span class="line"><span>#单个进程最大连接数（最大连接数=连接数*进程数）</span></span>
<span class="line"><span>worker_connections 65535;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#设定http服务器</span></span>
<span class="line"><span>http</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>include mime.types; #文件扩展名与文件类型映射表</span></span>
<span class="line"><span>default_type application/octet-stream; #默认文件类型</span></span>
<span class="line"><span>#charset utf-8; #默认编码</span></span>
<span class="line"><span>server_names_hash_bucket_size 128; #服务器名字的hash表大小</span></span>
<span class="line"><span>client_header_buffer_size 32k; #上传文件大小限制</span></span>
<span class="line"><span>large_client_header_buffers 4 64k; #设定请求缓</span></span>
<span class="line"><span>client_max_body_size 8m; #设定请求缓</span></span>
<span class="line"><span>sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span>
<span class="line"><span>autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span></span>
<span class="line"><span>tcp_nopush on; #防止网络阻塞</span></span>
<span class="line"><span>tcp_nodelay on; #防止网络阻塞</span></span>
<span class="line"><span>keepalive_timeout 120; #长连接超时时间，单位是秒</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span>
<span class="line"><span>fastcgi_connect_timeout 300;</span></span>
<span class="line"><span>fastcgi_send_timeout 300;</span></span>
<span class="line"><span>fastcgi_read_timeout 300;</span></span>
<span class="line"><span>fastcgi_buffer_size 64k;</span></span>
<span class="line"><span>fastcgi_buffers 4 64k;</span></span>
<span class="line"><span>fastcgi_busy_buffers_size 128k;</span></span>
<span class="line"><span>fastcgi_temp_file_write_size 128k;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#gzip模块设置</span></span>
<span class="line"><span>gzip on; #开启gzip压缩输出</span></span>
<span class="line"><span>gzip_min_length 1k; #最小压缩文件大小</span></span>
<span class="line"><span>gzip_buffers 4 16k; #压缩缓冲区</span></span>
<span class="line"><span>gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span>
<span class="line"><span>gzip_comp_level 2; #压缩等级</span></span>
<span class="line"><span>gzip_types text/plain application/x-javascript text/css application/xml;</span></span>
<span class="line"><span>#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span>
<span class="line"><span>gzip_vary on;</span></span>
<span class="line"><span>#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>upstream blog.ha97.com {</span></span>
<span class="line"><span>#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span>
<span class="line"><span>server 192.168.80.121:80 weight=3;</span></span>
<span class="line"><span>server 192.168.80.122:80 weight=2;</span></span>
<span class="line"><span>server 192.168.80.123:80 weight=3;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#虚拟主机的配置</span></span>
<span class="line"><span>server</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    #监听端口</span></span>
<span class="line"><span>    listen 80;</span></span>
<span class="line"><span>    #域名可以有多个，用空格隔开</span></span>
<span class="line"><span>    server_name www.ha97.com ha97.com;</span></span>
<span class="line"><span>    index index.html index.htm index.php;</span></span>
<span class="line"><span>    root /data/www/ha97;</span></span>
<span class="line"><span>    #隐藏入口文件</span></span>
<span class="line"><span>     location / {</span></span>
<span class="line"><span>            if (!-e $request_filename){</span></span>
<span class="line"><span>              rewrite ^/(.*)$ /index.php/$1 last;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    location ~ .*\\.(php|php5)?$</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>    fastcgi_pass 127.0.0.1:9000;</span></span>
<span class="line"><span>    fastcgi_index index.php;</span></span>
<span class="line"><span>    include fastcgi.conf;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    #图片缓存时间设置</span></span>
<span class="line"><span>    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>    expires 10d;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    #JS和CSS缓存时间设置</span></span>
<span class="line"><span>    location ~ .*\\.(js|css)?$</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>    expires 1h;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    #日志格式设定</span></span>
<span class="line"><span>    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span>    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span>    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;</span></span>
<span class="line"><span>    #定义本虚拟主机的访问日志</span></span>
<span class="line"><span>    access_log /var/log/nginx/ha97access.log access;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    #对 &quot;/&quot; 启用反向代理</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:88;</span></span>
<span class="line"><span>    proxy_redirect off;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>    #以下是一些反向代理的配置，可选。</span></span>
<span class="line"><span>    proxy_set_header Host $host;</span></span>
<span class="line"><span>    client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span></span>
<span class="line"><span>    client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span></span>
<span class="line"><span>    proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span></span>
<span class="line"><span>    proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span></span>
<span class="line"><span>    proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span></span>
<span class="line"><span>    proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span>
<span class="line"><span>    proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span></span>
<span class="line"><span>    proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span></span>
<span class="line"><span>    proxy_temp_file_write_size 64k;</span></span>
<span class="line"><span>    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    #设定查看Nginx状态的地址</span></span>
<span class="line"><span>    location /NginxStatus {</span></span>
<span class="line"><span>    stub_status on;</span></span>
<span class="line"><span>    access_log on;</span></span>
<span class="line"><span>    auth_basic &quot;NginxStatus&quot;;</span></span>
<span class="line"><span>    auth_basic_user_file conf/htpasswd;</span></span>
<span class="line"><span>    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    #本地动静分离反向代理配置</span></span>
<span class="line"><span>    #所有jsp的页面均交由tomcat或resin处理</span></span>
<span class="line"><span>    location ~ .(jsp|jspx|do)?$ {</span></span>
<span class="line"><span>    proxy_set_header Host $host;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:8080;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    #所有静态文件由nginx直接读取不经过tomcat或resin</span></span>
<span class="line"><span>    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span></span>
<span class="line"><span>    { expires 15d; }</span></span>
<span class="line"><span>    location ~ .*.(js|css)?$</span></span>
<span class="line"><span>    { expires 1h; }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,2)]))}const h=s(l,[["render",i]]);export{d as __pageData,h as default};
