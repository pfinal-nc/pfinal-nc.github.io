import{_ as i,c as a,o as n,a6 as t}from"./chunks/framework.jfW-voGb.js";const g=JSON.parse('{"title":"Building High-Performance Data Processing Pipelines in Go","description":"A comprehensive guide to building efficient and scalable data processing pipelines in Go, covering design patterns, concurrency models, performance optimization, and handling real-world challenges like backpressure and fault tolerance.","frontmatter":{"title":"Building High-Performance Data Processing Pipelines in Go","date":"2025-08-18T00:00:00.000Z","tags":["golang","data processing","pipelines","concurrency","performance","streaming"],"author":"PFinal南丞","keywords":"golang, data processing pipelines, concurrency, streaming data, performance optimization, fan-in, fan-out, backpressure, bounded channels, worker pools, context cancellation","description":"A comprehensive guide to building efficient and scalable data processing pipelines in Go, covering design patterns, concurrency models, performance optimization, and handling real-world challenges like backpressure and fault tolerance.","head":[["meta",{"name":"keywords","content":"golang, data processing pipelines, concurrency, streaming data, performance optimization, fan-in, fan-out, backpressure, bounded channels, worker pools, context cancellation"}]]},"headers":[],"relativePath":"golang/go-data-processing-pipelines.md","filePath":"golang/go-data-processing-pipelines.md","lastUpdated":1755497083000}'),h={name:"golang/go-data-processing-pipelines.md"};function l(k,s,p,e,E,r){return n(),a("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t("",69)]))}const y=i(h,[["render",l]]);export{g as __pageData,y as default};
