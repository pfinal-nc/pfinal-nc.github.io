import{_ as e,c as t,o as s,a6 as i}from"./chunks/framework.B5rgnJXo.js";const c=JSON.parse('{"title":"浏览器小技巧","description":"浏览器小技巧","frontmatter":{"title":"浏览器小技巧","date":"2023-05-15T10:14:02.000Z","tags":["工具"],"description":"浏览器小技巧","author":"PFinal南丞","keywords":"浏览器小技巧, 浏览器, 技巧,让CLI工具焕然一新！用golang与Color库打造多彩命令行体验, golang, 工具, 项目, 快速, 工具,MySQL, 配置文件, 解析, 优化, 数据库, 配置, 管理, 优化建议, 配置文件解析, MySQL配置文件, MySQL配置,Docker, 部署, Go, 项目, 实践, 指南,Git, 操作, 版本控制, 编程, Git基本操作,IDE, 工具, 效率, 编程, 插件, 开发, 效率工具,Nginx, 配置文件, 详解, 配置, Nginx配置文件详解, Nginx配置文件详解,PHP-FPM配置文件解析, php, 工具, php-fpm配置文件, php-fpm配置文件解析, php-fpm配置文件详解,PHP异步处理, php, 工具, php异步处理, php协程, php异步协程,PHP, 进程, 线程, 解析, PHP进程, PHP线程, PHP进程线程, PHP进程线程解析, PHP进程线程解析,PHP, 配置文件, 详解, 编程, web开发, 服务器配置,PHP钩子, php, 工具, php钩子, php钩子应用, php钩子的实现,Redis, 基本知识, 总结, 数据库, NoSQL, 缓存, 计数器, 排行榜, 社交网络, 消息队列, 分布式锁,Redis配置文件详解, 数据库, redis,TCP/IP,HTTP,Python, 库, 函数, 常用, Faker, 生成, 数据, 测试, 模拟,Python, 协程, 并发, 编程, asyncio, 异步IO, Future, Task,Python, 网站, 搜集, 资源, 开发, 编程, 工具, 镜像站, 爬虫,Python版本管理神器之pyenv, python, 工具, python版本管理, pyenv使用教程, python环境配置,爬虫, 加密, 解密, 算法, 特征, 收集,爬虫JS逆向Webpack技巧记录, 爬虫, JS, Webpack,爬虫, 加密, 解密, 算法, 特征, 收集,Composer, 配置文件, 依赖管理, 包管理, 版本控制,PHP, $_SERVER,PHP, 会话, 引发, Bug, PHP_SESSION, $_SESSION, 会话管理,PHP, 生成器, 解析, PHP生成器, PHP生成器解析, PHP生成器解析,PHP, 错误与异常处理, 异常, 错误, 处理, 异常处理, 错误处理, 程序, 健壮性, 稳定性,golang, gopsutil, 系统库, 监控, 系统信息, 进程, 进程监控, 系统信息获取,使用Go实现服务端事件推送SSE, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,用Wails和Vue.js打造跨平台桌面应用程序, Wails, Vue.js, 跨平台桌面应用程序, 抖音, 直播,基于Wails的Mac桌面应用开发, golang, Wails, 桌面应用, 开发,基于Wails的抖音直播工具, golang, Wails, 抖音, 直播, 工具, 桌面应用,golang, 游戏开发, 接口设计, 高性能, 高并发, 游戏服务器, 游戏接口, 游戏框架,Wails, 应用, 开发, 尝试, 桌面应用, Go, Web开发, Tailwindcss, sqlite,Go-Cache, Wails, 内存缓存, 性能优化, 缓存策略, 内存管理, 应用程序性能,golang, 工具, 提升生产力, 开发, golang, Go开发, Go工具, Go扩展包,提速利器：使用Go语言实现静态化API, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,深入Go内存分配, golang, 内存分配,Go Channel, 批量读取, 实际应用,Laravel, 构建, 手工, 框架, 手工构建, PHP,Laravel, Carbon, 类, 使用, Laravel-Carbon-类使用, Laravel-Carbon-类使用解析,PHP, 进程, 线程, 解析, PHP进程, PHP线程, PHP进程线程, PHP进程线程解析, PHP进程线程解析,golang, TLS, SSL, 网络安全, 传输层安全协议, 安全套接层, 加密, 数据传输, 网络通信,Golang, 协程池, 实现, 方法, 协程, 池, 概念, 应用, 场景, 实现方式, 协程池功能, 性能, 响应速度,golang, 脱敏扩展包：简化敏感信息处理的利器, 工具, golang扩展包, golang脱敏, golang脱敏工具,Golang, 工具, 效率, 提升, 小工具, 代码质量, 开发, 编程, 工具, 自动格式化, 自动导入, 代码补全,undefined,AutoCorrent专有名词大小写扩展包, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Create Go App CLI, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Go语言开发终端小工具后续, Go, 工具, 终端, 小工具, 开发, 编程, 命令, 工具开发, 代码实现, 运行命令,GO开发IP过滤小脚本, go, 工具, go开发ip过滤, go ip过滤脚本, go ip过滤,Go 开发终端小工具, golang, 工具, 开发, 编程, 终端, 天气查询, 手机归属地查询, cobra库, 命令行小工具,Go语言的高性能User-Agent解析库, golang, 工具, User-Agent解析, 性能测试, 解析库,golang, 地址生成, 扩展包, 地理位置, 中国地址, 地址生成工具, 地址数据, 地址库,Gomail邮件发送包, golang, 工具, 邮件发送, 邮件接收, 邮件发送包, 邮件发送工具,Go, URL检测, 工具, 编程, 终端命令, 开发, 检测, 小工具, 终端命令小工具, Go终端命令小工具,Go语言安全库使用指南, Go语言, 安全库, 使用指南, crypto, encoding, hash, math, rand, strconv, time,Go语言实现守护进程, 守护进程, 技术详解, Go语言, 进程管理, 关键技术点,Go, 并发, 模式, 编程, 并发编程, Go语言, 并发模式, 并发实战, 并发指南,go:embed 在 Go 开发中的应用与最佳实践, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Golang, Web应用, 安全指南, 输入验证, 输出编码, 会话管理, 文件上传, 跨站脚本攻击, SQL注入, 密码存储, 身份验证, 授权, 安全配置, 日志记录, 错误处理, 性能优化, 安全审计,pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向"},"headers":[],"relativePath":"工具/浏览器小技巧.md","filePath":"工具/浏览器小技巧.md","lastUpdated":1742433506000}'),n={name:"工具/浏览器小技巧.md"};function l(o,a,p,h,r,g){return s(),t("div",{"data-pagefind-body":!0},a[0]||(a[0]=[i(`<h1 id="浏览器小技巧" tabindex="-1">浏览器小技巧 <a class="header-anchor" href="#浏览器小技巧" aria-label="Permalink to &quot;浏览器小技巧&quot;">​</a></h1><h3 id="起因" tabindex="-1">起因 <a class="header-anchor" href="#起因" aria-label="Permalink to &quot;起因&quot;">​</a></h3><p>最近一直在处理老系统的一些数据, 处理的过程中,需要经常 对 查询结果 进行比对,然后 处理等操作. 经常需要把 查询的结果 复制出来, 然后新建一个文件 粘贴进去,对剪贴板使用频率大大的提高了. 于是 Google 了一下,发现 很多控制剪贴板需要下载软件,有点麻烦,于是 找到了 浏览器 自带的 剪贴板 功能.</p><h3 id="浏览器-剪贴板" tabindex="-1">浏览器 剪贴板 <a class="header-anchor" href="#浏览器-剪贴板" aria-label="Permalink to &quot;浏览器 剪贴板&quot;">​</a></h3><p>无意间在 网上看到,在浏览器 地址中输入:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>data:text/html, &lt;html contenteditable&gt;</span></span></code></pre></div><p>然后回车, 就可以在浏览器中整出了一个剪贴板.效果如下:</p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202311291008496.png" alt=""></p><p>直接可以 粘贴想要粘贴的东西.</p><h3 id="在alfred-中使用" tabindex="-1">在Alfred 中使用 <a class="header-anchor" href="#在alfred-中使用" aria-label="Permalink to &quot;在Alfred 中使用&quot;">​</a></h3><p>由于 经常使用的软件是 Alfred, 于是就 研究了一下 在 Alfred 中 如何快速的打开 浏览器 剪贴板.编写了一个快捷方式如下:</p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202311291006477.png" alt=""></p><p>实际就是在 Alfred 中 编写一个关键字, 关键字执行的操作是 打开 <code>data:text/html, &lt;html contenteditable&gt;</code> 这个url</p><h3 id="在终端中使用" tabindex="-1">在终端中使用 <a class="header-anchor" href="#在终端中使用" aria-label="Permalink to &quot;在终端中使用&quot;">​</a></h3><p>由于默认的浏览器是 chrome 于是在好奇,在其他浏览器中是否也可以使用, 于是 打开 Safari 浏览器, 输入 <code>data:text/html, &lt;html contenteditable&gt;</code> 发现也可以使用. 于是本着, 能用命令行 尽量不用快捷键 在 终端打开:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># chrome 浏览器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/Applications/Google Chrome.app&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data:text/html,%20%3Chtml%20contenteditable%3E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Safari 浏览器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/Applications/Safari.app&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data:text/html,%20%3Chtml%20contenteditable%3E</span></span></code></pre></div><p>在终端也是可以能够打开使用的.</p>`,17)]))}const P=e(n,[["render",l]]);export{c as __pageData,P as default};
