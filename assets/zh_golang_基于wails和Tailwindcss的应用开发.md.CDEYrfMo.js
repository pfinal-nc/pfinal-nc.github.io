import{_ as a,c as i,o as n,a6 as t}from"./chunks/framework.dsRYTprt.js";const c=JSON.parse('{"title":"基于wails的应用尝试开发","description":"基于wails的应用尝试开发","frontmatter":{"title":"基于wails的应用尝试开发","date":"2023-12-07T09:18:22.000Z","tags":["golang","Wails"],"description":"基于wails的应用尝试开发","author":"PFinal南丞","keywords":"Wails, 应用, 开发, 尝试, 桌面应用, Go, Web开发, Tailwindcss, sqlite","head":[["meta",{"name":"keywords","content":"Wails, 应用, 开发, 尝试, 桌面应用, Go, Web开发, Tailwindcss, sqlite"}]]},"headers":[],"relativePath":"zh/golang/基于wails和Tailwindcss的应用开发.md","filePath":"zh/golang/基于wails和Tailwindcss的应用开发.md","lastUpdated":1752052166000}'),l={name:"zh/golang/基于wails和Tailwindcss的应用开发.md"};function e(p,s,h,r,o,k){return n(),i("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t(`<h1 id="基于wails的应用尝试开发" tabindex="-1">基于wails的应用尝试开发 <a class="header-anchor" href="#基于wails的应用尝试开发" aria-label="Permalink to &quot;基于wails的应用尝试开发&quot;">​</a></h1><p>​ 最近一直在基于 go-wails 开发尝试开发一些Mac的桌面小应用,前面做了一个简单的 桌面时钟的小应用.功能比较单一,没有做一些数据的操作等.于是又重新开发了一个新的小应用做了一些新的尝试,废话不多说,做一个介绍与记录</p><h4 id="go-wails-介绍" tabindex="-1">go-wails 介绍 <a class="header-anchor" href="#go-wails-介绍" aria-label="Permalink to &quot;go-wails 介绍&quot;">​</a></h4><blockquote><p>Wails 是一个可让您使用 Go 和 Web 技术编写桌面应用的项目。将它看作为 Go 的快并且轻量的 Electron 替代品。Wails 带有许多预配置的模板，可让您快速启动和运行应用程序。 有以下框架的模板：Svelte、React、Vue、Preact、Lit 和 Vanilla。 每个模板都有 JavaScript 和 TypeScript 版本。</p></blockquote><p><a href="https://wails.io/" target="_blank" rel="noreferrer">wails官方介绍</a></p><h4 id="项目效果" tabindex="-1">项目效果 <a class="header-anchor" href="#项目效果" aria-label="Permalink to &quot;项目效果&quot;">​</a></h4><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202312041834484.png" alt=""></p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202312041835444.png" alt=""></p><h4 id="项目介绍" tabindex="-1">项目介绍 <a class="header-anchor" href="#项目介绍" aria-label="Permalink to &quot;项目介绍&quot;">​</a></h4><p>项目结构与前面的项目 <a href="https://github.com/pfinal-nc/wails_pf" target="_blank" rel="noreferrer">wails_pf</a> 类似,但这次我采用了前端框架 <strong>tailwindcss</strong> 来设计界面，并使用了 sqlite 数据库来存储数据。</p><p>该项目的主要目的是记录日常生活中的密码等信息。在开发的过程中，我遇到了一些问题，将它们记录下来，以备将来参考。</p><h4 id="tailwindcss" tabindex="-1">Tailwindcss <a class="header-anchor" href="#tailwindcss" aria-label="Permalink to &quot;Tailwindcss&quot;">​</a></h4><blockquote><p>Tailwind CSS 是一个功能类优先的 CSS 框架，它集成了最流行的 CSS 工具集</p></blockquote><p>由于前段使用的是 Tailwindcss, 在开发的时候 不得不开 使用 tmux 开2个窗口,来进行开发, 效果如下:</p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202312070933222.png" alt=""></p><p>于是找<strong>官方文档</strong> 发现有配置的地方, 但是配置后没有达到想要的结果.在目录中的 wails.json 文件进行的配置:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;build:dir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 前端目录的相对路径。默认为“frontend”</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;frontend:dir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 安装 Node 依赖的命令，在前端目录运行 - 通常是\`npm install\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;frontend:install&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 构建资产的命令，在前端目录中运行 - 通常是 \`npm run build\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;frontend:build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此命令已被 frontend:dev:build 取代。如果未指定 frontend:dev:build 将回退到此命令。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果此命令也未指定，将回退到 frontend:build</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;frontend:dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此命令是 frontend:build 的 dev 等价物。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果未指定回退到 frontend:dev</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;frontend:dev:build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此命令是 frontend:install 的 dev 等价物。如果未指定回退到 frontend:install</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;frontend:dev:install&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此命令在 \`wails dev\`上的单独进程中运行。用于第 3 方观察者或启动 3d 方开发服务器</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;frontend:dev:watcher&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 用于服务资产的第 3 方开发服务器的 URL，比如 Vite。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果设置为 &#39;auto&#39; 那么 devServerUrl 将从 Vite 输出中推断出来</span></span></code></pre></div><p>只能等待项目的后续了.</p><h4 id="项目的登录" tabindex="-1">项目的登录 <a class="header-anchor" href="#项目的登录" aria-label="Permalink to &quot;项目的登录&quot;">​</a></h4><p>由于项目涉及到登录，按照惯例我使用了 session 会话管理，但在 Mac 下发现不太支持，最终我只能放弃了 session 并使用了 localStorage 进行存储，以解决登录问题。</p><p>在官方仓库中搜索了一番，发现有其他开发者也遇到了类似的问题，于是我也将方案切换至 localStorage。如果有大佬解决了这个问题，请分享一下经验。</p><h4 id="项目的数据存储" tabindex="-1">项目的数据存储 <a class="header-anchor" href="#项目的数据存储" aria-label="Permalink to &quot;项目的数据存储&quot;">​</a></h4><p>刚开始设计项目的时候是准备离线使用的, 所以选了个 sqllite 数据库, 但是在开发的过程中涉及到 数据库存储的路径问题, 于是搞了个 install 的界面, 用来在程序安装的时候配置数据存储路径.最后发现这玩意有点坑,由于权限问题,配置的路径会出现权限问题.于是乎, 看好多的应用 默认直接在 /tmp 下搞.于是也写死,在 /tmp下来做</p><hr><p>目前开发遇到这些问题,后续更新有问题再做记录</p>`,25)]))}const g=a(l,[["render",e]]);export{c as __pageData,g as default};
