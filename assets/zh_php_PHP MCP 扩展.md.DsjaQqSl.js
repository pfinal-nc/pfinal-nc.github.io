import{_ as i,c as a,o as l,a6 as n}from"./chunks/framework.CFJSBgzT.js";const g=JSON.parse('{"title":"PHP MCP扩展-我的开源实践与思考","description":"分享我开发pfinalclub/php-mcp扩展的经历，探讨MCP协议对PHP生态的重要意义，以及为什么选择Workerman作为技术栈。","frontmatter":{"title":"PHP MCP扩展-我的开源实践与思考","date":"2025-09-09T10:30:00.000Z","tags":["PHP","MCP","开源","大语言模型","Workerman"],"description":"分享我开发pfinalclub/php-mcp扩展的经历，探讨MCP协议对PHP生态的重要意义，以及为什么选择Workerman作为技术栈。","author":"PFinal南丞","keywords":"PHP, MCP, 模型上下文协议, PHP MCP扩展, pfinalclub, Workerman, 大语言模型, PHP AI集成, 开源项目, PHP开发, MCP协议, PHP生态, 智能应用开发","head":[["meta",{"name":"keywords","content":"PHP, MCP, 模型上下文协议, PHP MCP扩展, pfinalclub, Workerman, 大语言模型, PHP AI集成, 开源项目, PHP开发, MCP协议, PHP生态, 智能应用开发"}]]},"headers":[],"relativePath":"zh/php/PHP MCP 扩展.md","filePath":"zh/php/PHP MCP 扩展.md","lastUpdated":1757395918000}'),t={name:"zh/php/PHP MCP 扩展.md"};function h(e,s,r,p,k,o){return l(),a("div",{"data-pagefind-body":!0},s[0]||(s[0]=[n(`<h1 id="php-mcp扩展-我的开源实践与思考" tabindex="-1">PHP MCP扩展：我的开源实践与思考 <a class="header-anchor" href="#php-mcp扩展-我的开源实践与思考" aria-label="Permalink to &quot;PHP MCP扩展：我的开源实践与思考&quot;">​</a></h1><blockquote><p>2024年11月，Anthropic发布了MCP（模型上下文协议）标准，为大语言模型与外部系统的交互提供了统一接口。作为PHP开发者，尝试开发了 <code>pfinalclub/php-mcp</code> php的 mcp 扩展。今天想和大家分享一下我的开发经历和思考。</p></blockquote><h2 id="🚀-mcp协议-大语言模型与外部系统的桥梁" tabindex="-1">🚀 MCP协议：大语言模型与外部系统的桥梁 <a class="header-anchor" href="#🚀-mcp协议-大语言模型与外部系统的桥梁" aria-label="Permalink to &quot;🚀 MCP协议：大语言模型与外部系统的桥梁&quot;">​</a></h2><p>模型上下文协议（Model Context Protocol，MCP）是由Anthropic于2024年11月提出的一项开源标准，旨在为大型语言模型与外部数据源、工具和系统之间的交互提供统一接口。</p><h3 id="为什么我觉得mcp协议很重要" tabindex="-1">为什么我觉得MCP协议很重要？ <a class="header-anchor" href="#为什么我觉得mcp协议很重要" aria-label="Permalink to &quot;为什么我觉得MCP协议很重要？&quot;">​</a></h3><p>说实话，当我第一次看到MCP协议的时候，我就觉得这玩意儿对整个开发社区来说都是个大机会。为什么呢？</p><ul><li><strong>打破信息孤岛</strong>：以前大语言模型和我们的数据之间总是有堵墙，现在MCP让模型能够安全、高效地访问我们的数据</li><li><strong>开发更简单</strong>：通过属性注解，我们可以轻松地把方法暴露给模型调用，这比之前写复杂的API接口简单多了</li><li><strong>生态整合</strong>：现在我们可以让各种大语言模型直接调用我们的代码，想想就兴奋</li><li><strong>语言平等</strong>：MCP让所有编程语言都有了平等的机会，不再只是Python、JavaScript的天下</li></ul><p><strong>对比其他语言：</strong></p><ul><li><strong>Python</strong>：早就有了各种AI库，但MCP让集成更标准化</li><li><strong>JavaScript/Node.js</strong>：前端AI应用很多，但MCP让后端集成更简单</li><li><strong>Java</strong>：企业级应用多，但AI集成一直比较麻烦，MCP解决了这个问题</li><li><strong>Go</strong>：性能好，但AI生态相对薄弱，MCP提供了新的机会</li><li><strong>PHP</strong>：Web开发的主力，但AI领域一直被忽视，无论是之前的 PHP-ML 还是后面的 coze等 Ai 平台 提供 SDK 的时候 大多是没有 PHP 版本的</li></ul><h2 id="📅-我的开发历程" tabindex="-1">📅 我的开发历程 <a class="header-anchor" href="#📅-我的开发历程" aria-label="Permalink to &quot;📅 我的开发历程&quot;">​</a></h2><h3 id="_2024年11月" tabindex="-1">2024年11月 <a class="header-anchor" href="#_2024年11月" aria-label="Permalink to &quot;2024年11月&quot;">​</a></h3><ul><li>Anthropic发布MCP协议标准</li><li>我看到这个消息后，第一反应就是：PHP生态需要这个！于是开始研究怎么实现</li></ul><h3 id="_2024年12月" tabindex="-1">2024年12月 <a class="header-anchor" href="#_2024年12月" aria-label="Permalink to &quot;2024年12月&quot;">​</a></h3><ul><li>决定基于Workerman来开发，为什么选Workerman？因为它性能好，支持异步，特别适合实时应用</li><li>开始动手写 <code>pfinalclub/php-mcp</code></li></ul><h3 id="_2025年1月" tabindex="-1">2025年1月 <a class="header-anchor" href="#_2025年1月" aria-label="Permalink to &quot;2025年1月&quot;">​</a></h3><ul><li>基础架构搞定了，核心功能也实现了</li><li>第一个版本发布到Packagist，心里还是挺激动的</li></ul><h3 id="_2025年9月5日" tabindex="-1">2025年9月5日 <a class="header-anchor" href="#_2025年9月5日" aria-label="Permalink to &quot;2025年9月5日&quot;">​</a></h3><ul><li><strong>PHP基金会官方宣布</strong>：要开发官方PHP MCP SDK</li><li>看到这个消息，我既高兴又有点小得意：看来我的判断是对的！</li><li>官方说会和现有社区项目协作，包括我的项目</li></ul><h2 id="🏗️-我的技术选择" tabindex="-1">🏗️ 我的技术选择 <a class="header-anchor" href="#🏗️-我的技术选择" aria-label="Permalink to &quot;🏗️ 我的技术选择&quot;">​</a></h2><h3 id="为什么选择workerman" tabindex="-1">为什么选择Workerman？ <a class="header-anchor" href="#为什么选择workerman" aria-label="Permalink to &quot;为什么选择Workerman？&quot;">​</a></h3><p>说实话，当时选择技术栈的时候，我考虑了很多方案。最终选择Workerman，主要是这几个原因：</p><p><strong>1. 性能优势</strong></p><ul><li>Workerman的异步特性真的很强，能处理大量并发连接</li><li>协程模型让内存使用更高效</li><li>特别适合实时应用，比如聊天、客服这些场景</li></ul><p><strong>2. 开发体验</strong></p><ul><li>API设计简洁，上手容易</li><li>文档还算完善，社区也比较活跃</li><li>部署相对简单，不需要太多配置</li></ul><p><strong>3. 实际需求</strong></p><ul><li>我主要想解决实时应用的问题</li><li>高并发场景下的性能表现很重要</li><li>轻量级，依赖少，部署方便</li></ul><h3 id="我的扩展特点" tabindex="-1">我的扩展特点 <a class="header-anchor" href="#我的扩展特点" aria-label="Permalink to &quot;我的扩展特点&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装我的扩展</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pfinalclub/php-mcp</span></span></code></pre></div><p><strong>核心特性：</strong></p><ul><li>基于Workerman的高性能异步架构</li><li>协程模型，适合高并发场景</li><li>简化的API设计，快速上手</li><li>专注于实时应用和低延迟需求</li><li>目前唯一可用于生产环境的PHP MCP实现</li></ul><h2 id="⚡-我的扩展性能表现" tabindex="-1">⚡ 我的扩展性能表现 <a class="header-anchor" href="#⚡-我的扩展性能表现" aria-label="Permalink to &quot;⚡ 我的扩展性能表现&quot;">​</a></h2><h3 id="性能特点" tabindex="-1">性能特点 <a class="header-anchor" href="#性能特点" aria-label="Permalink to &quot;性能特点&quot;">​</a></h3><ul><li><strong>高并发处理</strong>：基于Workerman协程，能轻松处理大量并发连接</li><li><strong>内存效率</strong>：协程模型比传统PHP进程模型更省内存</li><li><strong>实时响应</strong>：特别适合需要低延迟的实时应用</li><li><strong>部署简单</strong>：基于Workerman，部署相对简单</li></ul><h3 id="开发体验" tabindex="-1">开发体验 <a class="header-anchor" href="#开发体验" aria-label="Permalink to &quot;开发体验&quot;">​</a></h3><ul><li><strong>API简洁</strong>：设计简单，上手容易，不需要太多学习成本</li><li><strong>轻量级</strong>：依赖少，不会给你的项目增加太多负担</li><li><strong>实时特性</strong>：专门为实时应用优化，比如聊天、客服这些场景</li><li><strong>生产可用</strong>：目前是唯一可以在生产环境使用的PHP MCP实现</li></ul><h2 id="🛡️-安全性考虑" tabindex="-1">🛡️ 安全性考虑 <a class="header-anchor" href="#🛡️-安全性考虑" aria-label="Permalink to &quot;🛡️ 安全性考虑&quot;">​</a></h2><h3 id="我的扩展安全特性" tabindex="-1">我的扩展安全特性 <a class="header-anchor" href="#我的扩展安全特性" aria-label="Permalink to &quot;我的扩展安全特性&quot;">​</a></h3><ul><li><strong>基础安全机制</strong>：已经实现了基本的安全防护</li><li><strong>灵活配置</strong>：你可以根据具体需求自定义安全策略</li><li><strong>生产可用</strong>：虽然还在完善中，但已经可以用于生产环境</li><li><strong>持续改进</strong>：我会根据用户反馈不断改进安全机制</li></ul><h2 id="🌐-社区与生态" tabindex="-1">🌐 社区与生态 <a class="header-anchor" href="#🌐-社区与生态" aria-label="Permalink to &quot;🌐 社区与生态&quot;">​</a></h2><h3 id="我的项目现状" tabindex="-1">我的项目现状 <a class="header-anchor" href="#我的项目现状" aria-label="Permalink to &quot;我的项目现状&quot;">​</a></h3><ul><li><strong>Workerman生态</strong>：与Workerman社区紧密集成，可以复用很多现有资源</li><li><strong>轻量级设计</strong>：适合各种规模的项目，从小型到中型都行</li><li><strong>快速响应</strong>：作为个人项目，我能快速响应用户需求和反馈</li><li><strong>学习成本低</strong>：API设计简单，新手也能快速上手</li><li><strong>开源友好</strong>：欢迎社区贡献，大家一起完善这个项目</li></ul><h2 id="🎯-我的扩展适合什么场景" tabindex="-1">🎯 我的扩展适合什么场景？ <a class="header-anchor" href="#🎯-我的扩展适合什么场景" aria-label="Permalink to &quot;🎯 我的扩展适合什么场景？&quot;">​</a></h2><h3 id="特别适合这些场景" tabindex="-1">特别适合这些场景 <a class="header-anchor" href="#特别适合这些场景" aria-label="Permalink to &quot;特别适合这些场景&quot;">​</a></h3><ul><li>✅ <strong>生产环境</strong>：目前唯一可用于生产环境的PHP MCP实现</li><li><strong>实时应用</strong>：聊天系统、在线客服、实时通知等</li><li><strong>高并发场景</strong>：需要处理大量并发连接的应用</li><li><strong>快速开发</strong>：想要快速集成MCP功能，不想折腾太多配置</li><li><strong>Workerman项目</strong>：已经在使用Workerman的项目</li><li><strong>轻量级需求</strong>：不想引入太多依赖，希望保持项目简洁</li><li><strong>性能优先</strong>：对响应速度和并发处理能力有较高要求</li></ul><h3 id="不太适合的场景" tabindex="-1">不太适合的场景 <a class="header-anchor" href="#不太适合的场景" aria-label="Permalink to &quot;不太适合的场景&quot;">​</a></h3><ul><li>需要复杂的企业级功能（比如复杂的权限管理）</li><li>团队对Workerman不熟悉</li><li>需要与Symfony深度集成的项目</li></ul><h2 id="💡-实际应用案例" tabindex="-1">💡 实际应用案例 <a class="header-anchor" href="#💡-实际应用案例" aria-label="Permalink to &quot;💡 实际应用案例&quot;">​</a></h2><h3 id="智能客服系统" tabindex="-1">智能客服系统 <a class="header-anchor" href="#智能客服系统" aria-label="Permalink to &quot;智能客服系统&quot;">​</a></h3><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用我的扩展构建实时客服</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PfinalClub\\PhpMcp\\Server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;getUserInfo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($userId) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取用户信息逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $userInfo;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sendMessage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($message, $userId) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 发送消息逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;status&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="实时数据监控" tabindex="-1">实时数据监控 <a class="header-anchor" href="#实时数据监控" aria-label="Permalink to &quot;实时数据监控&quot;">​</a></h3><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实时监控系统</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;getSystemStatus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;cpu&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCpuUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;memory&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMemoryUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;timestamp&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sendAlert&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($message, $level) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 发送告警逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;alert_sent&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="简单的代码示例" tabindex="-1">简单的代码示例 <a class="header-anchor" href="#简单的代码示例" aria-label="Permalink to &quot;简单的代码示例&quot;">​</a></h3><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个简单的计算器工具</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;calculate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($expression) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 简单的计算逻辑（注意：生产环境需要更严格的验证）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;return </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$expression</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="🔮-我的想法和展望" tabindex="-1">🔮 我的想法和展望 <a class="header-anchor" href="#🔮-我的想法和展望" aria-label="Permalink to &quot;🔮 我的想法和展望&quot;">​</a></h2><h3 id="对php生态的思考" tabindex="-1">对PHP生态的思考 <a class="header-anchor" href="#对php生态的思考" aria-label="Permalink to &quot;对PHP生态的思考&quot;">​</a></h3><p><strong>我的看法：</strong></p><ul><li><strong>智能能力增强</strong>：PHP应用现在可以轻松集成智能功能了</li><li><strong>开发效率提升</strong>：不用再写复杂的API接口，大语言模型可以直接调用我们的方法</li><li><strong>生态繁荣</strong>：PHP在智能时代也有竞争力</li><li><strong>人才需求</strong>：会需要更多既懂PHP又懂智能技术的开发者</li></ul><h3 id="我的项目规划" tabindex="-1">我的项目规划 <a class="header-anchor" href="#我的项目规划" aria-label="Permalink to &quot;我的项目规划&quot;">​</a></h3><ul><li><strong>持续优化</strong>：会继续改进性能，增加更多功能</li><li><strong>社区建设</strong>：希望有更多开发者参与进来</li><li><strong>文档完善</strong>：会写更多教程和示例</li><li><strong>生态整合</strong>：考虑与其他PHP工具和框架的集成</li></ul><h2 id="🎉-写在最后" tabindex="-1">🎉 写在最后 <a class="header-anchor" href="#🎉-写在最后" aria-label="Permalink to &quot;🎉 写在最后&quot;">​</a></h2><p>看到PHP基金会宣布要开发官方MCP SDK的时候，我既高兴又有点小得意。高兴的是，这证明了我的判断是对的——MCP对PHP生态确实很重要。小得意的是，我在官方宣布之前就开始做了，说明我的技术嗅觉还算敏锐。</p><p><strong>现在的状况：</strong></p><ul><li>我的扩展还不够成熟</li><li>官方SDK还在开发中，未来会有更多选择</li><li>PHP开发者现在就可以开始探索大语言模型与PHP的深度集成</li></ul><p><strong>我的想法：</strong></p><ul><li>不管官方SDK什么时候发布，我的扩展都会继续维护和改进</li><li>希望能帮助更多PHP开发者快速上手MCP</li><li>欢迎大家一起参与，让PHP在智能时代更有竞争力</li></ul><p>如果你对MCP感兴趣，或者想试试我的扩展，欢迎来GitHub看看。有问题也可以直接找我，我会尽力帮助大家。</p><p>让我们一起期待PHP MCP生态的蓬勃发展！</p><hr>`,69)]))}const c=i(t,[["render",h]]);export{g as __pageData,c as default};
