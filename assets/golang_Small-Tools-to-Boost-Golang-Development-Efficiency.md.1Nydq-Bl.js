import{_ as t,c as o,o as a,a6 as i}from"./chunks/framework.V1MgpNK7.js";const m=JSON.parse('{"title":"Small Tools to Boost Golang Development Efficiency","description":"Introduces some small tools that can improve Golang development efficiency, including gofumpt, goimports, gopls, etc., to help developers write higher-quality Go code.","frontmatter":{"title":"Small Tools to Boost Golang Development Efficiency","date":"2024-11-09T11:31:32.000Z","tags":["golang","tools"],"description":"Introduces some small tools that can improve Golang development efficiency, including gofumpt, goimports, gopls, etc., to help developers write higher-quality Go code.","author":"PFinal南丞","keywords":"Golang, tools, efficiency, improvement, small tools, code quality, development, programming, tools, auto-formatting, auto-import, code completion, AI","sticky":true,"head":[["meta",{"name":"keywords","content":"Golang, tools, efficiency, improvement, small tools, code quality, development, programming, tools, auto-formatting, auto-import, code completion, AI,pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向"}]]},"headers":[],"relativePath":"golang/Small-Tools-to-Boost-Golang-Development-Efficiency.md","filePath":"golang/Small-Tools-to-Boost-Golang-Development-Efficiency.md","lastUpdated":1752111824000}'),l={name:"golang/Small-Tools-to-Boost-Golang-Development-Efficiency.md"};function n(s,e,p,d,c,r){return a(),o("div",{"data-pagefind-body":!0},e[0]||(e[0]=[i('<h1 id="small-tools-to-boost-golang-development-efficiency" tabindex="-1">Small Tools to Boost Golang Development Efficiency <a class="header-anchor" href="#small-tools-to-boost-golang-development-efficiency" aria-label="Permalink to &quot;Small Tools to Boost Golang Development Efficiency&quot;">​</a></h1><p>At the end of the year, while quickly fixing bugs in some old projects and iterating updates more frequently, I found that the old projects were not deployed with Git but still used the original FTP drag-and-drop method. Since I develop locally on a Mac, every time I need to deploy code, I have to package the updated code into a .zip and send it to operations. However, the compressed files always contain .DS_Store files, which operations have to manually delete after extraction, and I&#39;ve been complained about this many times. So before sending, I always run <em>ls -a</em> and manually delete .DS_Store files, which is a bit annoying. Therefore, I wrote a small tool to delete .DS_Store files and improve efficiency.</p><h4 id="effect" tabindex="-1">Effect <a class="header-anchor" href="#effect" aria-label="Permalink to &quot;Effect&quot;">​</a></h4><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202401250948067.png" alt=""></p><h4 id="implementation-idea" tabindex="-1">Implementation Idea <a class="header-anchor" href="#implementation-idea" aria-label="Permalink to &quot;Implementation Idea&quot;">​</a></h4><p>The implementation is simple: traverse all directories under the target project, find .DS_Store files, and delete them.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... Go code unchanged ...</span></span></code></pre></div><p>Used <em>filepath.Walk</em> to traverse the specified directory and delete .DS_Store files.</p><p>Previously, I also introduced using <em>terminal small tools for development</em>, and here I directly integrated it in.</p><p>Run <em>cobra-cli add</em>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cobra-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pf_cd</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Add a pf_cd command</span></span></code></pre></div><p>This generates a <em>pfCd.go</em> file, which you then modify:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... Go code unchanged ...</span></span></code></pre></div><p>When running <strong>Run</strong>, it checks whether a directory is specified. If not, it uses the current directory. No path validation is done here; you need to modify it according to your actual situation.</p><p>After completing these, you can run:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>Install it locally and enjoy using it. Also, add a help introduction for the tool, and add the pf_cd command to the pf_tools help introduction, as shown below:</p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202401251059984.png" alt=""></p><h4 id="finally" tabindex="-1">Finally <a class="header-anchor" href="#finally" aria-label="Permalink to &quot;Finally&quot;">​</a></h4><p>This is just a simple introduction. For the specific implementation, you can check the source code:</p><p><a href="https://github.com/PFinal-tool/pf_tools" target="_blank" rel="noreferrer">https://github.com/PFinal-tool/pf_tools</a></p>',21)]))}const g=t(l,[["render",n]]);export{m as __pageData,g as default};
