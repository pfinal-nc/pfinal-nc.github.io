import{_ as i,c as a,o as e,a6 as n}from"./chunks/framework.CFJSBgzT.js";const c=JSON.parse('{"title":"Comprehensive Guide to Go Modules and Dependency Management","description":"A deep dive into Go modules, covering basic usage, advanced features, dependency management best practices, versioning strategies, and solutions for complex project structures like monorepos.","frontmatter":{"title":"Comprehensive Guide to Go Modules and Dependency Management","date":"2025-08-18T00:00:00.000Z","tags":["golang","modules","dependency management","go modules","semantic versioning","monorepo"],"author":"PFinal南丞","keywords":"golang, go modules, dependency management, semantic versioning, monorepo, workspace, vendoring, module proxy, versioning strategies","description":"A deep dive into Go modules, covering basic usage, advanced features, dependency management best practices, versioning strategies, and solutions for complex project structures like monorepos.","head":[["meta",{"name":"keywords","content":"golang, go modules, dependency management, semantic versioning, monorepo, workspace, vendoring, module proxy, versioning strategies"}]]},"headers":[],"relativePath":"golang/go-modules-dependency-management.md","filePath":"golang/go-modules-dependency-management.md","lastUpdated":1755497083000}'),t={name:"golang/go-modules-dependency-management.md"};function l(o,s,p,h,d,r){return e(),a("div",{"data-pagefind-body":!0},s[0]||(s[0]=[n(`<h1 id="comprehensive-guide-to-go-modules-and-dependency-management" tabindex="-1">Comprehensive Guide to Go Modules and Dependency Management <a class="header-anchor" href="#comprehensive-guide-to-go-modules-and-dependency-management" aria-label="Permalink to &quot;Comprehensive Guide to Go Modules and Dependency Management&quot;">​</a></h1><p>Go modules, introduced in Go 1.11 and made default in Go 1.16, revolutionized how Go projects handle dependencies. They provide a robust, decentralized system for managing library versions, replacing the old GOPATH-based workflow. This comprehensive guide explores Go modules in depth, from basic operations to advanced patterns and best practices for complex project structures.</p><h2 id="_1-introduction-to-go-modules" tabindex="-1">1. Introduction to Go Modules <a class="header-anchor" href="#_1-introduction-to-go-modules" aria-label="Permalink to &quot;1. Introduction to Go Modules&quot;">​</a></h2><h3 id="_1-1-what-are-go-modules" tabindex="-1">1.1. What are Go Modules? <a class="header-anchor" href="#_1-1-what-are-go-modules" aria-label="Permalink to &quot;1.1. What are Go Modules?&quot;">​</a></h3><p>Go modules are the official dependency management solution for Go. They allow you to:</p><ul><li>Define your project&#39;s dependencies and their versions explicitly.</li><li>Work on projects outside of GOPATH.</li><li>Achieve reproducible builds.</li><li>Publish and consume versioned packages.</li></ul><p>A module is a collection of Go packages stored in a file tree with a <code>go.mod</code> file at its root. The <code>go.mod</code> file defines:</p><ul><li>The module&#39;s path (import path prefix for packages within the module).</li><li>The Go version the module is targeting.</li><li>The module&#39;s dependencies and their required versions.</li></ul><h3 id="_1-2-module-path" tabindex="-1">1.2. Module Path <a class="header-anchor" href="#_1-2-module-path" aria-label="Permalink to &quot;1.2. Module Path&quot;">​</a></h3><p>The module path is typically the repository&#39;s URL, which serves as the prefix for import paths within the module. For example, if your module is hosted at <code>github.com/username/myproject</code>, the module path is <code>github.com/username/myproject</code>, and a package in the <code>utils</code> directory would be imported as <code>github.com/username/myproject/utils</code>.</p><h2 id="_2-getting-started-with-go-modules" tabindex="-1">2. Getting Started with Go Modules <a class="header-anchor" href="#_2-getting-started-with-go-modules" aria-label="Permalink to &quot;2. Getting Started with Go Modules&quot;">​</a></h2><h3 id="_2-1-initializing-a-module" tabindex="-1">2.1. Initializing a Module <a class="header-anchor" href="#_2-1-initializing-a-module" aria-label="Permalink to &quot;2.1. Initializing a Module&quot;">​</a></h3><p>To create a new module or convert an existing project to use modules:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For a new project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myproject</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myproject</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com/username/myproject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For an existing project in GOPATH</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/src/github.com/username/oldproject</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com/username/oldproject</span></span></code></pre></div><p>This creates a <code>go.mod</code> file:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// go.mod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myproject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.21</span></span></code></pre></div><h3 id="_2-2-adding-dependencies" tabindex="-1">2.2. Adding Dependencies <a class="header-anchor" href="#_2-2-adding-dependencies" aria-label="Permalink to &quot;2.2. Adding Dependencies&quot;">​</a></h3><p>When you import a package and run a command like <code>go build</code> or <code>go run</code>, Go automatically downloads the required dependencies and records them in <code>go.mod</code>:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.go</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/google/uuid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Generated UUID:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Run the program:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.go</span></span></code></pre></div><p>Go will automatically fetch the <code>github.com/google/uuid</code> package and update <code>go.mod</code>:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// go.mod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myproject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.21</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">google</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uuid v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span></span></code></pre></div><p>It also creates a <code>go.sum</code> file to ensure cryptographic checksums of dependencies:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// go.sum</span></span>
<span class="line"><span>github.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=</span></span>
<span class="line"><span>github.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=</span></span></code></pre></div><h3 id="_2-3-basic-module-commands" tabindex="-1">2.3. Basic Module Commands <a class="header-anchor" href="#_2-3-basic-module-commands" aria-label="Permalink to &quot;2.3. Basic Module Commands&quot;">​</a></h3><ul><li><code>go mod init &lt;module-path&gt;</code>: Initialize a new module.</li><li><code>go mod tidy</code>: Add missing and remove unused modules.</li><li><code>go mod download</code>: Download modules to local cache.</li><li><code>go mod vendor</code>: Make a vendored copy of dependencies.</li><li><code>go mod graph</code>: Print the module dependency graph.</li><li><code>go mod verify</code>: Verify dependencies have expected content.</li><li><code>go mod why</code>: Explain why packages or modules are needed.</li></ul><h2 id="_3-understanding-go-mod-and-go-sum" tabindex="-1">3. Understanding <code>go.mod</code> and <code>go.sum</code> <a class="header-anchor" href="#_3-understanding-go-mod-and-go-sum" aria-label="Permalink to &quot;3. Understanding \`go.mod\` and \`go.sum\`&quot;">​</a></h2><h3 id="_3-1-go-mod-file-structure" tabindex="-1">3.1. <code>go.mod</code> File Structure <a class="header-anchor" href="#_3-1-go-mod-file-structure" aria-label="Permalink to &quot;3.1. \`go.mod\` File Structure&quot;">​</a></h3><p>The <code>go.mod</code> file has a specific structure:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myproject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.21</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">google</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uuid v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gorilla</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mux v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require (</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Indirect dependencies - those needed by our direct dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gorilla</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // indirect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exclude github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">google</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uuid v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Exclude a specific version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">replace github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gorilla</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mux v1.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">forked</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mux v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">custom</span></span></code></pre></div><h3 id="_3-2-go-sum-file" tabindex="-1">3.2. <code>go.sum</code> File <a class="header-anchor" href="#_3-2-go-sum-file" aria-label="Permalink to &quot;3.2. \`go.sum\` File&quot;">​</a></h3><p>The <code>go.sum</code> file contains cryptographic checksums for the content of specific module versions. This ensures that dependencies haven&#39;t been tampered with. It should always be committed to version control.</p><h2 id="_4-semantic-versioning-and-compatibility" tabindex="-1">4. Semantic Versioning and Compatibility <a class="header-anchor" href="#_4-semantic-versioning-and-compatibility" aria-label="Permalink to &quot;4. Semantic Versioning and Compatibility&quot;">​</a></h2><p>Go modules strongly encourage the use of Semantic Versioning (SemVer): <code>MAJOR.MINOR.PATCH</code>.</p><h3 id="_4-1-version-selection" tabindex="-1">4.1. Version Selection <a class="header-anchor" href="#_4-1-version-selection" aria-label="Permalink to &quot;4.1. Version Selection&quot;">​</a></h3><p>Go uses minimal version selection (MVS). If multiple modules require different versions of the same dependency, Go selects the highest version that satisfies all requirements.</p><h3 id="_4-2-major-version-handling" tabindex="-1">4.2. Major Version Handling <a class="header-anchor" href="#_4-2-major-version-handling" aria-label="Permalink to &quot;4.2. Major Version Handling&quot;">​</a></h3><p>In SemVer, a major version change (e.g., from v1 to v2) indicates breaking changes. Go handles this by changing the import path:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For v1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/googleapis/gax-go/v2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For v2, the import path includes /v2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/googleapis/gax-go/v2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><p>The module path in <code>go.mod</code> for v2 would be:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">googleapis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gax</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-go/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v2</span></span></code></pre></div><h3 id="_4-3-compatibility-promise" tabindex="-1">4.3. Compatibility Promise <a class="header-anchor" href="#_4-3-compatibility-promise" aria-label="Permalink to &quot;4.3. Compatibility Promise&quot;">​</a></h3><p>For a v1 or v0 module:</p><ul><li>Adding a new function or method is non-breaking.</li><li>Changing the signature of a function or method is breaking.</li><li>Removing a function or method is breaking.</li></ul><p>For a v2+ module:</p><ul><li>The same rules apply, but the major version in the import path provides isolation.</li></ul><h2 id="_5-advanced-dependency-management" tabindex="-1">5. Advanced Dependency Management <a class="header-anchor" href="#_5-advanced-dependency-management" aria-label="Permalink to &quot;5. Advanced Dependency Management&quot;">​</a></h2><h3 id="_5-1-managing-transitive-dependencies" tabindex="-1">5.1. Managing Transitive Dependencies <a class="header-anchor" href="#_5-1-managing-transitive-dependencies" aria-label="Permalink to &quot;5.1. Managing Transitive Dependencies&quot;">​</a></h3><p>Transitive dependencies (dependencies of your dependencies) are automatically managed. However, you might need to influence them.</p><h4 id="requiring-a-specific-version" tabindex="-1">Requiring a Specific Version <a class="header-anchor" href="#requiring-a-specific-version" aria-label="Permalink to &quot;Requiring a Specific Version&quot;">​</a></h4><p>To force a specific version of a transitive dependency:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com/some/package@v1.5.0</span></span></code></pre></div><p>This adds it to your <code>require</code> block, even if it&#39;s not a direct dependency.</p><h4 id="excluding-versions" tabindex="-1">Excluding Versions <a class="header-anchor" href="#excluding-versions" aria-label="Permalink to &quot;Excluding Versions&quot;">​</a></h4><p>To prevent a specific version from being used:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// go.mod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exclude github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">some</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span></span></code></pre></div><h3 id="_5-2-replacing-dependencies" tabindex="-1">5.2. Replacing Dependencies <a class="header-anchor" href="#_5-2-replacing-dependencies" aria-label="Permalink to &quot;5.2. Replacing Dependencies&quot;">​</a></h3><p>The <code>replace</code> directive is useful for:</p><ul><li>Using a fork of a dependency.</li><li>Testing a local version of a dependency.</li><li>Pointing to a different major version path.</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// go.mod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">replace github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">original</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fork</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Or to a local path</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">replace github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">original</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ..</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-package</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Or to a specific commit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">replace github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">original</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fork</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20210101000000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abcdef123456</span></span></code></pre></div><h3 id="_5-3-vendoring-dependencies" tabindex="-1">5.3. Vendoring Dependencies <a class="header-anchor" href="#_5-3-vendoring-dependencies" aria-label="Permalink to &quot;5.3. Vendoring Dependencies&quot;">​</a></h3><p>Vendoring creates a copy of dependencies in a <code>vendor</code> directory within your project. This can be useful for:</p><ul><li>Ensuring builds work without external network access.</li><li>Auditing the exact code of dependencies.</li></ul><p>To vendor dependencies:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vendor</span></span></code></pre></div><p>To use the vendor directory for builds:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -mod=vendor</span></span></code></pre></div><p>Note that vendoring is generally discouraged in favor of the module proxy and checksum database, as it increases repository size and can lead to stale dependencies.</p><h2 id="_6-working-with-private-modules" tabindex="-1">6. Working with Private Modules <a class="header-anchor" href="#_6-working-with-private-modules" aria-label="Permalink to &quot;6. Working with Private Modules&quot;">​</a></h2><p>When working with private repositories, you need to configure Go to bypass the module proxy and checksum database.</p><h3 id="_6-1-goprivate-environment-variable" tabindex="-1">6.1. GOPRIVATE Environment Variable <a class="header-anchor" href="#_6-1-goprivate-environment-variable" aria-label="Permalink to &quot;6.1. GOPRIVATE Environment Variable&quot;">​</a></h3><p>Set the <code>GOPRIVATE</code> environment variable to a comma-separated list of glob patterns matching your private module paths:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOPRIVATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">github.com/mycompany/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,gitlab.com/myorg/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span></code></pre></div><p>This tells Go commands not to use the public module proxy or checksum database for these modules.</p><h3 id="_6-2-git-configuration" tabindex="-1">6.2. Git Configuration <a class="header-anchor" href="#_6-2-git-configuration" aria-label="Permalink to &quot;6.2. Git Configuration&quot;">​</a></h3><p>Ensure Git is configured to access your private repositories, typically with SSH keys or personal access tokens.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For HTTPS with a token</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> url.&quot;https://token:x-oauth-basic@github.com/&quot;.insteadOf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For SSH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Make sure your SSH keys are set up correctly</span></span></code></pre></div><h2 id="_7-module-proxies-and-checksum-databases" tabindex="-1">7. Module Proxies and Checksum Databases <a class="header-anchor" href="#_7-module-proxies-and-checksum-databases" aria-label="Permalink to &quot;7. Module Proxies and Checksum Databases&quot;">​</a></h2><p>Go&#39;s module system uses a distributed proxy and checksum database to improve download speed and security.</p><h3 id="_7-1-goproxy" tabindex="-1">7.1. GOPROXY <a class="header-anchor" href="#_7-1-goproxy" aria-label="Permalink to &quot;7.1. GOPROXY&quot;">​</a></h3><p>The <code>GOPROXY</code> environment variable controls which proxies Go uses:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Default value (as of Go 1.13)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOPROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://proxy.golang.org,direct</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># To disable proxy usage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOPROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">direct</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># To use a custom proxy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOPROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://myproxy.example.com</span></span></code></pre></div><p><code>proxy.golang.org</code> is the official Go module mirror, which provides fast, reliable access to modules.</p><h3 id="_7-2-gosumdb" tabindex="-1">7.2. GOSUMDB <a class="header-anchor" href="#_7-2-gosumdb" aria-label="Permalink to &quot;7.2. GOSUMDB&quot;">​</a></h3><p>The <code>GOSUMDB</code> environment variable controls which checksum database Go uses:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Default value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOSUMDB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sum.golang.org</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># To disable checksum verification</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOSUMDB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">off</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># To use a custom checksum database</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOSUMDB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mychecksumdb.example.com</span></span></code></pre></div><p><code>sum.golang.org</code> is the official Go checksum database, ensuring that downloaded modules haven&#39;t been tampered with.</p><h2 id="_8-versioning-strategies" tabindex="-1">8. Versioning Strategies <a class="header-anchor" href="#_8-versioning-strategies" aria-label="Permalink to &quot;8. Versioning Strategies&quot;">​</a></h2><h3 id="_8-1-release-tagging" tabindex="-1">8.1. Release Tagging <a class="header-anchor" href="#_8-1-release-tagging" aria-label="Permalink to &quot;8.1. Release Tagging&quot;">​</a></h3><p>Tag your releases with Git tags following SemVer:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.2.3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.2.3</span></span></code></pre></div><p>Go tools will automatically detect these tags and make them available as versions.</p><h3 id="_8-2-pre-release-versions" tabindex="-1">8.2. Pre-release Versions <a class="header-anchor" href="#_8-2-pre-release-versions" aria-label="Permalink to &quot;8.2. Pre-release Versions&quot;">​</a></h3><p>Use pre-release suffixes for beta, alpha, or release candidate versions:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2.0.0-beta.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2.0.0-beta.1</span></span></code></pre></div><p>These are considered unstable and will not be selected by <code>go get</code> unless explicitly requested.</p><h3 id="_8-3-pseudo-versions" tabindex="-1">8.3. Pseudo-Versions <a class="header-anchor" href="#_8-3-pseudo-versions" aria-label="Permalink to &quot;8.3. Pseudo-Versions&quot;">​</a></h3><p>When there is no SemVer tag, Go creates a pseudo-version based on the commit timestamp and hash:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>v0.0.0-20210101000000-abcdef123456</span></span></code></pre></div><p>Pseudo-versions are useful for depending on specific commits, but they should generally be replaced with proper tagged releases.</p><h2 id="_9-managing-complex-project-structures" tabindex="-1">9. Managing Complex Project Structures <a class="header-anchor" href="#_9-managing-complex-project-structures" aria-label="Permalink to &quot;9. Managing Complex Project Structures&quot;">​</a></h2><h3 id="_9-1-monorepos-with-workspaces-go-1-18" tabindex="-1">9.1. Monorepos with Workspaces (Go 1.18+) <a class="header-anchor" href="#_9-1-monorepos-with-workspaces-go-1-18" aria-label="Permalink to &quot;9.1. Monorepos with Workspaces (Go 1.18+)&quot;">​</a></h3><p>Workspaces allow you to work with multiple modules in a single repository (monorepo) without having to publish or version them.</p><h4 id="setting-up-a-workspace" tabindex="-1">Setting Up a Workspace <a class="header-anchor" href="#setting-up-a-workspace" aria-label="Permalink to &quot;Setting Up a Workspace&quot;">​</a></h4><p>Create a <code>go.work</code> file in the root of your monorepo:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// go.work</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.21</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkg1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkg2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Each directory listed with <code>use</code> should contain a <code>go.mod</code> file.</p><h4 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h4><ul><li>Edit and build multiple modules simultaneously.</li><li>Local development and testing without publishing changes.</li><li>IDE support for cross-module navigation and refactoring.</li></ul><h3 id="_9-2-multi-module-repositories" tabindex="-1">9.2. Multi-Module Repositories <a class="header-anchor" href="#_9-2-multi-module-repositories" aria-label="Permalink to &quot;9.2. Multi-Module Repositories&quot;">​</a></h3><p>In a monorepo without workspaces (Go &lt; 1.18 or when workspaces aren&#39;t suitable), you can have multiple <code>go.mod</code> files in different directories.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>myproject/</span></span>
<span class="line"><span>├── go.mod  // Root module</span></span>
<span class="line"><span>├── main.go</span></span>
<span class="line"><span>├── service-a/</span></span>
<span class="line"><span>│   ├── go.mod  // Separate module</span></span>
<span class="line"><span>│   └── main.go</span></span>
<span class="line"><span>├── service-b/</span></span>
<span class="line"><span>│   ├── go.mod  // Separate module</span></span>
<span class="line"><span>│   └── main.go</span></span>
<span class="line"><span>└── shared/</span></span>
<span class="line"><span>    └── utils/</span></span>
<span class="line"><span>        ├── go.mod  // Separate module</span></span>
<span class="line"><span>        └── utils.go</span></span></code></pre></div><p>To depend on a local module from another module:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// service-a/go.mod</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myproject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utils v0.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">replace github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myproject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ..</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shared</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utils</span></span></code></pre></div><p>This approach works but can be cumbersome, which is why workspaces are preferred for Go 1.18+.</p><h3 id="_9-3-internal-packages" tabindex="-1">9.3. Internal Packages <a class="header-anchor" href="#_9-3-internal-packages" aria-label="Permalink to &quot;9.3. Internal Packages&quot;">​</a></h3><p>Use the <code>internal</code> directory to prevent external packages from importing code:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>myproject/</span></span>
<span class="line"><span>├── go.mod</span></span>
<span class="line"><span>├── main.go</span></span>
<span class="line"><span>├── internal/</span></span>
<span class="line"><span>│   └── database/</span></span>
<span class="line"><span>│       └── database.go  // Only accessible within myproject</span></span>
<span class="line"><span>└── pkg/</span></span>
<span class="line"><span>    └── api/</span></span>
<span class="line"><span>        └── api.go      // Publicly importable</span></span></code></pre></div><p>Packages outside of <code>myproject/...</code> cannot import <code>myproject/internal/...</code>.</p><h2 id="_10-best-practices" tabindex="-1">10. Best Practices <a class="header-anchor" href="#_10-best-practices" aria-label="Permalink to &quot;10. Best Practices&quot;">​</a></h2><h3 id="_10-1-dependency-hygiene" tabindex="-1">10.1. Dependency Hygiene <a class="header-anchor" href="#_10-1-dependency-hygiene" aria-label="Permalink to &quot;10.1. Dependency Hygiene&quot;">​</a></h3><ol><li><strong>Keep dependencies minimal</strong>: Only import what you actually use.</li><li><strong>Regularly update dependencies</strong>: Use <code>go list -m -u all</code> to check for updates.</li><li><strong>Verify dependencies</strong>: Run <code>go mod verify</code> to ensure integrity.</li><li><strong>Tidy up</strong>: Regularly run <code>go mod tidy</code> to keep <code>go.mod</code> and <code>go.sum</code> clean.</li></ol><h3 id="_10-2-versioning" tabindex="-1">10.2. Versioning <a class="header-anchor" href="#_10-2-versioning" aria-label="Permalink to &quot;10.2. Versioning&quot;">​</a></h3><ol><li><strong>Follow SemVer</strong>: Clearly communicate breaking changes with major version bumps.</li><li><strong>Tag releases</strong>: Use Git tags for versioned releases.</li><li><strong>Document breaking changes</strong>: Maintain a CHANGELOG.md.</li></ol><h3 id="_10-3-module-design" tabindex="-1">10.3. Module Design <a class="header-anchor" href="#_10-3-module-design" aria-label="Permalink to &quot;10.3. Module Design&quot;">​</a></h3><ol><li><strong>Stable APIs</strong>: Design your module&#39;s public API carefully, as breaking changes require major version bumps.</li><li><strong>Clear module paths</strong>: Use a clear, descriptive module path, typically matching the repository URL.</li><li><strong>Go version compatibility</strong>: Set the <code>go</code> directive to the minimum required version.</li></ol><h3 id="_10-4-security" tabindex="-1">10.4. Security <a class="header-anchor" href="#_10-4-security" aria-label="Permalink to &quot;10.4. Security&quot;">​</a></h3><ol><li><strong>Use the checksum database</strong>: Don&#39;t disable <code>GOSUMDB</code> unless absolutely necessary.</li><li><strong>Audit dependencies</strong>: Regularly check for security vulnerabilities in your dependencies.</li><li><strong>Verify before replace</strong>: When using <code>replace</code>, ensure you trust the replacement.</li></ol><h2 id="_11-troubleshooting-common-issues" tabindex="-1">11. Troubleshooting Common Issues <a class="header-anchor" href="#_11-troubleshooting-common-issues" aria-label="Permalink to &quot;11. Troubleshooting Common Issues&quot;">​</a></h2><h3 id="_11-1-cannot-find-module-providing-package" tabindex="-1">11.1. &quot;Cannot find module providing package&quot; <a class="header-anchor" href="#_11-1-cannot-find-module-providing-package" aria-label="Permalink to &quot;11.1. &quot;Cannot find module providing package&quot;&quot;">​</a></h3><p>This error usually occurs when:</p><ul><li>The module path in <code>go.mod</code> is incorrect.</li><li>The package path in the import statement is incorrect.</li><li>The dependency hasn&#39;t been added to <code>go.mod</code>.</li></ul><p>Solution:</p><ol><li>Verify the import path and module path are correct.</li><li>Run <code>go mod tidy</code> to add missing dependencies.</li></ol><h3 id="_11-2-invalid-version-unknown-revision" tabindex="-1">11.2. &quot;Invalid version: unknown revision&quot; <a class="header-anchor" href="#_11-2-invalid-version-unknown-revision" aria-label="Permalink to &quot;11.2. &quot;Invalid version: unknown revision&quot;&quot;">​</a></h3><p>This happens when Go cannot find the specified version of a module.</p><p>Solution:</p><ol><li>Check if the version tag exists in the repository.</li><li>For private repositories, ensure <code>GOPRIVATE</code> is set correctly.</li><li>Clear the module cache: <code>go clean -modcache</code> and try again.</li></ol><h3 id="_11-3-inconsistent-vendoring" tabindex="-1">11.3. &quot;Inconsistent vendoring&quot; <a class="header-anchor" href="#_11-3-inconsistent-vendoring" aria-label="Permalink to &quot;11.3. &quot;Inconsistent vendoring&quot;&quot;">​</a></h3><p>This occurs when there&#39;s a mismatch between the <code>go.mod</code> file and the <code>vendor</code> directory.</p><p>Solution:</p><ol><li>Regenerate the vendor directory: <code>go mod vendor</code>.</li><li>Or, remove the <code>vendor</code> directory and stop using vendoring.</li></ol><h2 id="_12-migration-from-gopath" tabindex="-1">12. Migration from GOPATH <a class="header-anchor" href="#_12-migration-from-gopath" aria-label="Permalink to &quot;12. Migration from GOPATH&quot;">​</a></h2><p>If you&#39;re migrating from GOPATH to modules:</p><ol><li>Initialize the module with <code>go mod init</code>.</li><li>Remove any <code>vendor</code> directory if present.</li><li>Update import paths if they were relative to GOPATH.</li><li>Run <code>go mod tidy</code> to fetch dependencies.</li><li>Update CI/CD pipelines to not rely on GOPATH structure.</li></ol><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Go modules provide a powerful and flexible system for dependency management. By understanding the concepts of module paths, semantic versioning, workspaces, and the various commands and configuration options, you can effectively manage dependencies in both simple and complex Go projects.</p><p>Key takeaways:</p><ol><li><strong>Modules are the standard</strong>: Embrace modules for all new and existing projects.</li><li><strong>Semantic Versioning is key</strong>: Use SemVer to manage expectations about breaking changes.</li><li><strong>Workspaces simplify monorepos</strong>: For complex projects with multiple modules, use workspaces.</li><li><strong>Security is built-in</strong>: Leverage the module proxy and checksum database for secure dependency management.</li><li><strong>Keep it tidy</strong>: Regular use of <code>go mod tidy</code> keeps your module files clean and correct.</li></ol><p>By following the best practices outlined in this guide, you can ensure that your Go projects have reliable, secure, and maintainable dependency management.</p>`,151)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
