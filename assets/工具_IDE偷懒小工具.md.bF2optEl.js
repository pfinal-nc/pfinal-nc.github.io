import{_ as e,c as t,o,a6 as n}from"./chunks/framework.B5rgnJXo.js";const c=JSON.parse('{"title":"IDE偷懒小工具","description":"收集一些开发过程中常用的小工具","frontmatter":{"title":"IDE偷懒小工具","date":"2024-05-31T13:59:31.000Z","tags":["工具"],"description":"收集一些开发过程中常用的小工具","author":"PFinal南丞","keywords":"IDE, 工具, 效率, 编程, 插件, 开发, 效率工具,Nginx, 配置文件, 详解, 配置, Nginx配置文件详解, Nginx配置文件详解,PHP-FPM配置文件解析, php, 工具, php-fpm配置文件, php-fpm配置文件解析, php-fpm配置文件详解,PHP异步处理, php, 工具, php异步处理, php协程, php异步协程,PHP, 进程, 线程, 解析, PHP进程, PHP线程, PHP进程线程, PHP进程线程解析, PHP进程线程解析,PHP, 配置文件, 详解, 编程, web开发, 服务器配置,PHP钩子, php, 工具, php钩子, php钩子应用, php钩子的实现,Redis, 基本知识, 总结, 数据库, NoSQL, 缓存, 计数器, 排行榜, 社交网络, 消息队列, 分布式锁,Redis配置文件详解, 数据库, redis,TCP/IP,HTTP,Python, 库, 函数, 常用, Faker, 生成, 数据, 测试, 模拟,Python, 协程, 并发, 编程, asyncio, 异步IO, Future, Task,Python, 网站, 搜集, 资源, 开发, 编程, 工具, 镜像站, 爬虫,Python版本管理神器之pyenv, python, 工具, python版本管理, pyenv使用教程, python环境配置,爬虫, 加密, 解密, 算法, 特征, 收集,爬虫JS逆向Webpack技巧记录, 爬虫, JS, Webpack,爬虫, 加密, 解密, 算法, 特征, 收集,Composer, 配置文件, 依赖管理, 包管理, 版本控制,PHP, $_SERVER,PHP, 会话, 引发, Bug, PHP_SESSION, $_SESSION, 会话管理,PHP, 生成器, 解析, PHP生成器, PHP生成器解析, PHP生成器解析,PHP, 错误与异常处理, 异常, 错误, 处理, 异常处理, 错误处理, 程序, 健壮性, 稳定性,golang, gopsutil, 系统库, 监控, 系统信息, 进程, 进程监控, 系统信息获取,使用Go实现服务端事件推送SSE, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,用Wails和Vue.js打造跨平台桌面应用程序, Wails, Vue.js, 跨平台桌面应用程序, 抖音, 直播,基于Wails的Mac桌面应用开发, golang, Wails, 桌面应用, 开发,基于Wails的抖音直播工具, golang, Wails, 抖音, 直播, 工具, 桌面应用,golang, 游戏开发, 接口设计, 高性能, 高并发, 游戏服务器, 游戏接口, 游戏框架,Wails, 应用, 开发, 尝试, 桌面应用, Go, Web开发, Tailwindcss, sqlite,Go-Cache, Wails, 内存缓存, 性能优化, 缓存策略, 内存管理, 应用程序性能,golang, 工具, 提升生产力, 开发, golang, Go开发, Go工具, Go扩展包,提速利器：使用Go语言实现静态化API, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,深入Go内存分配, golang, 内存分配,Go Channel, 批量读取, 实际应用,Laravel, 构建, 手工, 框架, 手工构建, PHP,Laravel, Carbon, 类, 使用, Laravel-Carbon-类使用, Laravel-Carbon-类使用解析,PHP, 进程, 线程, 解析, PHP进程, PHP线程, PHP进程线程, PHP进程线程解析, PHP进程线程解析,golang, TLS, SSL, 网络安全, 传输层安全协议, 安全套接层, 加密, 数据传输, 网络通信,Golang, 协程池, 实现, 方法, 协程, 池, 概念, 应用, 场景, 实现方式, 协程池功能, 性能, 响应速度,golang, 脱敏扩展包：简化敏感信息处理的利器, 工具, golang扩展包, golang脱敏, golang脱敏工具,Golang, 工具, 效率, 提升, 小工具, 代码质量, 开发, 编程, 工具, 自动格式化, 自动导入, 代码补全,undefined,AutoCorrent专有名词大小写扩展包, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Create Go App CLI, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Go语言开发终端小工具后续, Go, 工具, 终端, 小工具, 开发, 编程, 命令, 工具开发, 代码实现, 运行命令,GO开发IP过滤小脚本, go, 工具, go开发ip过滤, go ip过滤脚本, go ip过滤,Go 开发终端小工具, golang, 工具, 开发, 编程, 终端, 天气查询, 手机归属地查询, cobra库, 命令行小工具,Go语言的高性能User-Agent解析库, golang, 工具, User-Agent解析, 性能测试, 解析库,golang, 地址生成, 扩展包, 地理位置, 中国地址, 地址生成工具, 地址数据, 地址库,Gomail邮件发送包, golang, 工具, 邮件发送, 邮件接收, 邮件发送包, 邮件发送工具,Go, URL检测, 工具, 编程, 终端命令, 开发, 检测, 小工具, 终端命令小工具, Go终端命令小工具,Go语言安全库使用指南, Go语言, 安全库, 使用指南, crypto, encoding, hash, math, rand, strconv, time,Go语言实现守护进程, 守护进程, 技术详解, Go语言, 进程管理, 关键技术点,Go, 并发, 模式, 编程, 并发编程, Go语言, 并发模式, 并发实战, 并发指南,go:embed 在 Go 开发中的应用与最佳实践, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Golang, Web应用, 安全指南, 输入验证, 输出编码, 会话管理, 文件上传, 跨站脚本攻击, SQL注入, 密码存储, 身份验证, 授权, 安全配置, 日志记录, 错误处理, 性能优化, 安全审计,pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向"},"headers":[],"relativePath":"工具/IDE偷懒小工具.md","filePath":"工具/IDE偷懒小工具.md","lastUpdated":1741950068000}'),s={name:"工具/IDE偷懒小工具.md"};function l(i,a,p,r,h,g){return o(),t("div",{"data-pagefind-body":!0},a[0]||(a[0]=[n(`<h1 id="ide偷懒小工具" tabindex="-1">IDE偷懒小工具 <a class="header-anchor" href="#ide偷懒小工具" aria-label="Permalink to &quot;IDE偷懒小工具&quot;">​</a></h1><p>俗话说，不会&quot;偷懒&quot;的程序员不是好程序员。程序员的偷懒方式多种多样，我的偷懒方式就是搞IDE 插件,用起来爽歪歪。</p><h2 id="layui-补全插件" tabindex="-1">Layui 补全插件 <a class="header-anchor" href="#layui-补全插件" aria-label="Permalink to &quot;Layui 补全插件&quot;">​</a></h2><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202405311410117.png" alt=""></p><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h4><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202405311412384.png" alt=""></p><p>如上图所示:</p><ol><li>输入<code>lay.</code> 然后按<code>tab</code>键, 即可补全<code>layui</code> 中的所一些组件</li><li>如下,在class 中输入 lay然后按tab 能够输出一些 layui 常用的 css</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;lay-&quot;&gt;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre></div><h4 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h4><p>目前更新到版本 1.0.8 后续会持续更新</p><h4 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h4><p><a href="https://plugins.jetbrains.com/plugin/download?rel=true&amp;updateId=208393" target="_blank" rel="noreferrer">Layui 补全插件</a></p><iframe width="384px" height="319px" src="https://plugins.jetbrains.com/embeddable/card/15814"></iframe><h2 id="开发小工具插件" tabindex="-1">开发小工具插件 <a class="header-anchor" href="#开发小工具插件" aria-label="Permalink to &quot;开发小工具插件&quot;">​</a></h2><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202406030937519.png" alt=""></p><p>如上图所示, 在开发的过程中,需要经常性的写一些注释,比如:</p><ol><li>重复性的字符串</li></ol><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#========== Task start ===========</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ......</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#========== Task end ===========</span></span></code></pre></div><p>比如上面这种,一个手敲等号 很麻烦 而且还不统一 有的 敲的 多了 有的敲的少了, 使用插件就方便多了,</p><p>*<em>#<em>10</em></em> 选择 然后 按<code>tab</code>键 即可自动生成 10个#号 方便多了</p><p>2.时间戳</p><p>开发测试的时候,经常性的需要获取当前的时间戳, 有时候打开网页获取,有时候需要使用另外的工具 获取一下,比较的麻烦,所以也做到了插件里,就可以直接获取,如下图所示:</p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202406030942550.png" alt=""></p><ol start="3"><li>随机生成用户信息</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>常纯 13602962851 l3ewz@0355.net</span></span></code></pre></div><p>插件也提供了个随机生成用户星系的功能. 方便用来进行开发的测试, 目前插件就提供了这些功能.后续一点一点的添加</p><h4 id="版本-1" tabindex="-1">版本 <a class="header-anchor" href="#版本-1" aria-label="Permalink to &quot;版本&quot;">​</a></h4><p>目前更新到版本 1.0.2 后续会持续更新</p><h4 id="下载-1" tabindex="-1">下载 <a class="header-anchor" href="#下载-1" aria-label="Permalink to &quot;下载&quot;">​</a></h4><p><a href="https://plugins.jetbrains.com/plugin/download?rel=true&amp;updateId=543972" target="_blank" rel="noreferrer">开发小工具插件</a></p>`,31)]))}const u=e(s,[["render",l]]);export{c as __pageData,u as default};
