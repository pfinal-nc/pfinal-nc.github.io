import{_ as a,c as i,o as t,a6 as s}from"./chunks/framework.BLq2o8be.js";const k=JSON.parse('{"title":"Crawler JS Reverse Engineering Webpack Tips","description":"Crawler JS reverse engineering Webpack tips","frontmatter":{"title":"Crawler JS Reverse Engineering Webpack Tips","date":"2023-05-15T10:14:02.000Z","tags":["crawler","python","Webpack"],"description":"Crawler JS reverse engineering Webpack tips","author":"PFinal南丞","keywords":"Crawler JS Reverse Engineering Webpack Tips, crawler, JS, Webpack","head":[["meta",{"name":"keywords","content":"Crawler JS Reverse Engineering Webpack Tips, crawler, JS, Webpack"}]]},"headers":[],"relativePath":"Python/Crawler-JS-Reverse-Engineering-Webpack-Tips.md","filePath":"Python/Crawler-JS-Reverse-Engineering-Webpack-Tips.md","lastUpdated":1752111561000}'),n={name:"Python/Crawler-JS-Reverse-Engineering-Webpack-Tips.md"};function r(o,e,l,p,h,c){return t(),i("div",{"data-pagefind-body":!0},e[0]||(e[0]=[s(`<h1 id="crawler-js-reverse-engineering-webpack-tips" tabindex="-1">Crawler JS Reverse Engineering Webpack Tips <a class="header-anchor" href="#crawler-js-reverse-engineering-webpack-tips" aria-label="Permalink to &quot;Crawler JS Reverse Engineering Webpack Tips&quot;">​</a></h1><h2 id="concept" tabindex="-1">Concept: <a class="header-anchor" href="#concept" aria-label="Permalink to &quot;Concept:&quot;">​</a></h2><p>Webpack is a static module bundler for modern JavaScript applications. When webpack processes an application, it internally builds a dependency graph from one or more entry points and then combines every module your project needs into one or more bundles. All resources are rendered via JavaScript.</p><h2 id="identification" tabindex="-1">Identification: <a class="header-anchor" href="#identification" aria-label="Permalink to &quot;Identification:&quot;">​</a></h2><ol><li>As shown below:</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305151419884.png" alt=""></p><blockquote><p>Viewing the page source code, most are constructed by script tags</p></blockquote><ol start="2"><li>As shown:</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305160910831.png" alt=""></p><blockquote><p>Most webpack projects can find this webpack JS file</p></blockquote><h2 id="structure" tabindex="-1">Structure: <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure:&quot;">​</a></h2><p>The structure of JS after webpack packaging is basically a self-executing function used as a loader to load modules. Common structures are as follows:</p><h3 id="type-1" tabindex="-1">Type 1: <a class="header-anchor" href="#type-1" aria-label="Permalink to &quot;Type 1:&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305160951192.png" alt=""></p><p>As shown:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modules are stored as arrays, each element is a function</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This function is called the loader or distributor. All modules are loaded and executed from this function.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the loader to call the first module</span></span></code></pre></div><h3 id="type-2" tabindex="-1">Type 2 <a class="header-anchor" href="#type-2" aria-label="Permalink to &quot;Type 2&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305160944584.png" alt=""></p><p>As shown:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;param&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modules are stored as objects, elements are function objects</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This function is called the loader or distributor. All modules are loaded and executed from this function.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1x2y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the loader to call 1x2y for execution</span></span></code></pre></div><h3 id="type-3" tabindex="-1">Type 3 <a class="header-anchor" href="#type-3" aria-label="Permalink to &quot;Type 3&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161006212.png" alt=""></p><p><strong>As shown above, the third type is also the most common. If there are many modules, they will be packaged into a JS file, then a global variable window[&quot;webpackJsonp&quot;] = [ ] is defined to store modules that need to be dynamically imported, then the push() method of window[&quot;webpackJsonp&quot;] is rewritten as webpackJsonpCallback(). That is, window[&quot;webpackJsonp&quot;].push() actually executes webpackJsonpCallback(). window[&quot;webpackJsonp&quot;].push() receives three parameters: the first is the module ID, the second is an array or object defining many functions, and the third is the function to call (optional).</strong></p><p>Each JS module file starts with</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.webpackJsonp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.webpackJsonp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],{}]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2 is the module id, {} contains the function object to call</span></span></code></pre></div><h2 id="reverse-extraction-js-ideas-1" tabindex="-1">Reverse Extraction JS Ideas (1) <a class="header-anchor" href="#reverse-extraction-js-ideas-1" aria-label="Permalink to &quot;Reverse Extraction JS Ideas (1)&quot;">​</a></h2><ol><li>First, find the encryption parameter entry</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161020050.png" alt=""></p><p>As shown above, the encryption parameter is <em>sign</em></p><ol start="2"><li>Find the loader function</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161035140.png" alt=""></p><blockquote><p>As shown above, find a function call like <strong>n(&#39;xx&#39;)</strong> to load the module, then set a breakpoint and refresh the page. Move the mouse over and you can basically find the loader function, as shown below:</p></blockquote><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161038581.png" alt=""></p><ol start="3"><li><p>Set a breakpoint on the call() or apply() method in the loader function, extract the module containing the encryption function and related modules together.</p></li><li><p>Export the encryption parameter as a global variable</p></li></ol><h2 id="reverse-extraction-js-ideas-2" tabindex="-1">Reverse Extraction JS Ideas (2) <a class="header-anchor" href="#reverse-extraction-js-ideas-2" aria-label="Permalink to &quot;Reverse Extraction JS Ideas (2)&quot;">​</a></h2><ol><li>Find the encryption parameter function entry, determine which module contains the encryption function.</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161044042.png" alt=""></p><ol start="2"><li>Find the encryption module and extract it</li></ol><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161050194.png" alt=""></p><p>As shown above, after loading the m function&#39;s module, continue to find other modules, and finally find the encryption module as shown below</p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202305161052841.png" alt=""></p><ol start="3"><li>Locally extract the code upwards, then fix any missing functions or parameters as needed</li></ol><p>After extracting the above encryption module, start to fix other missing functions and parameters, then you can try it out</p><blockquote><p>Note: Set two breakpoints after the encryption function (method), after the breakpoint in the encryption function (method), step into the loader function, then set a breakpoint after the loader (like return e[n].call(r.exports, r, r.exports, d)), jump to the breakpoint after the loader, in the console input the Hook function (depending on the loader function, modify the Hook function code), remove the breakpoint after the loader, jump to the breakpoint after the encryption function (method), in the console input window._wbpk to get all module code related to the encryption function.</p></blockquote><h3 id="other-ideas-are-being-updated" tabindex="-1">Other ideas are being updated... <a class="header-anchor" href="#other-ideas-are-being-updated" aria-label="Permalink to &quot;Other ideas are being updated...&quot;">​</a></h3>`,47)]))}const u=a(n,[["render",r]]);export{k as __pageData,u as default};
