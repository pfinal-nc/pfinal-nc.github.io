import{_ as e,c as t,o as i,a6 as s}from"./chunks/framework.V1MgpNK7.js";const u=JSON.parse('{"title":"Go CLI Utility Development Practice","description":"Detailed introduction to developing Go CLI utilities, including weather query and mobile phone attribution query functions, using the cobra library to develop command-line tools.","frontmatter":{"title":"Go CLI Utility Development Practice","date":"2023-11-09T17:22:37.000Z","tags":["golang","tools"],"description":"Detailed introduction to developing Go CLI utilities, including weather query and mobile phone attribution query functions, using the cobra library to develop command-line tools.","author":"PFinal南丞","keywords":"Go CLI Utility, golang, tools, development, programming, terminal, weather query, mobile phone attribution query, cobra library, command-line utility","sticky":true,"head":[["meta",{"name":"keywords","content":"Go CLI Utility, golang, tools, development, programming, terminal, weather query, mobile phone attribution query, cobra library, command-line utility,pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向"}]]},"headers":[],"relativePath":"golang/Go-CLI-Utility-Development-Practice.md","filePath":"golang/Go-CLI-Utility-Development-Practice.md","lastUpdated":1752111824000}'),n={name:"golang/Go-CLI-Utility-Development-Practice.md"};function o(l,a,r,p,c,d){return i(),t("div",{"data-pagefind-body":!0},a[0]||(a[0]=[s(`<h1 id="go-cli-utility-development-practice" tabindex="-1">Go CLI Utility Development Practice <a class="header-anchor" href="#go-cli-utility-development-practice" aria-label="Permalink to &quot;Go CLI Utility Development Practice&quot;">​</a></h1><h2 id="preface" tabindex="-1">Preface <a class="header-anchor" href="#preface" aria-label="Permalink to &quot;Preface&quot;">​</a></h2><p>While searching for documentation, I saw someone using Rust to write a terminal weather query tool. Inspired, I tried to use golang to create a command-line utility. The result is as follows:</p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202311081716928.png" alt=""></p><p>In fact, using golang to write is very convenient, with many available libraries.</p><h2 id="cobra-library" tabindex="-1">Cobra Library <a class="header-anchor" href="#cobra-library" aria-label="Permalink to &quot;Cobra Library&quot;">​</a></h2><p>cobra is a command-line program library for writing CLI programs. It also provides a scaffolding tool for generating cobra-based application frameworks. Many well-known open-source projects use cobra for CLI construction, such as Kubernetes, Hugo, etcd, etc.</p><h4 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com/spf13/cobra/cobra</span></span></code></pre></div><blockquote><p>Note: After installation, check <strong>go/bin/</strong> to see if the command is available.</p></blockquote><h4 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><p>Create a new project folder <strong>pf_tools</strong> and initialize the project:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cobra-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>This initializes a CLI project with the following structure:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── LICENSE</span></span>
<span class="line"><span>├── README.md</span></span>
<span class="line"><span>├── cmd</span></span>
<span class="line"><span>│   ├── pfM.go</span></span>
<span class="line"><span>│   ├── pfWt.go</span></span>
<span class="line"><span>│   └── root.go</span></span>
<span class="line"><span>├── go.mod</span></span>
<span class="line"><span>├── go.sum</span></span>
<span class="line"><span>├── main.go</span></span>
<span class="line"><span>└── pak</span></span>
<span class="line"><span>    ├── mobile.go</span></span>
<span class="line"><span>    └── weather.go</span></span></code></pre></div><p>In the cmd directory, root.go is generated by default, with code like:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... Go code unchanged ...</span></span></code></pre></div><p>cobra.Command represents a command, with the following properties:</p><ul><li>Use: command name</li><li>Short: short description</li><li>Long: full description</li><li>Run: function to execute when the command is run</li></ul><p>rootCmd.Execute() is the entry point for command execution. It parses os.Args[1:] (by default, or can be set via Command.SetArgs), traverses the command tree, and finds the appropriate match and flag.</p><h4 id="add-subcommands" tabindex="-1">Add Subcommands <a class="header-anchor" href="#add-subcommands" aria-label="Permalink to &quot;Add Subcommands&quot;">​</a></h4><p>Since the utility has more than one function, you need to add subcommands, such as:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cobra-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pf_m</span></span></code></pre></div><p><strong>pf_m</strong> is used to query mobile phone attribution, with the following effect:</p><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202311091002314.png" alt=""></p><p>The code is similar to root.go, just add a command and initialize it, then implement the function.</p><h2 id="termui-library" tabindex="-1">Termui Library <a class="header-anchor" href="#termui-library" aria-label="Permalink to &quot;Termui Library&quot;">​</a></h2><p>To make the terminal display look better, I used the termui library, which is a fully customizable cross-platform terminal dashboard and widget library built on termbox-go.</p><h4 id="installation-1" tabindex="-1">Installation <a class="header-anchor" href="#installation-1" aria-label="Permalink to &quot;Installation&quot;">​</a></h4><p>Since go mod is used for management, just use go mod directly.</p><p>Import in code:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ui </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;github.com/gizak/termui/v3&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;github.com/gizak/termui/v3/widgets&quot;</span></span></code></pre></div><p>Then run <strong>go mod tidy</strong> to download dependencies.</p><h4 id="layout" tabindex="-1">Layout <a class="header-anchor" href="#layout" aria-label="Permalink to &quot;Layout&quot;">​</a></h4><p>The weather query uses the Table widget, code as follows:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... Go code unchanged ...</span></span></code></pre></div><p>The mobile query uses the List widget, code as follows:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... Go code unchanged ...</span></span></code></pre></div><p>The structure doesn&#39;t change much. The official termui GitHub repo has examples, but some properties like <strong>table.Title</strong>, <strong>l.TitleStyle</strong> are not used in the official examples and need to be tried out yourself.</p><h3 id="code-address" tabindex="-1">Code Address <a class="header-anchor" href="#code-address" aria-label="Permalink to &quot;Code Address&quot;">​</a></h3><p><a href="https://github.com/PFinal-tool/pf_tools" target="_blank" rel="noreferrer">https://github.com/PFinal-tool/pf_tools</a></p><h4 id="finally-have-fun" tabindex="-1">Finally, have fun! <a class="header-anchor" href="#finally-have-fun" aria-label="Permalink to &quot;Finally, have fun!&quot;">​</a></h4>`,42)]))}const g=e(n,[["render",o]]);export{u as __pageData,g as default};
