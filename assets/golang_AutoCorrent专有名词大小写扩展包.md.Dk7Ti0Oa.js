import{_ as a,c as i,o as n,a6 as t}from"./chunks/framework.B5rgnJXo.js";const d=JSON.parse('{"title":"AutoCorrent专有名词大小写扩展包","description":"介绍一款快速创建golang项目的工具","frontmatter":{"title":"AutoCorrent专有名词大小写扩展包","date":"2024-08-23T17:15:27.000Z","tags":["golang"],"description":"介绍一款快速创建golang项目的工具","author":"PFinal南丞","keywords":"AutoCorrent专有名词大小写扩展包, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Create Go App CLI, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Go语言开发终端小工具后续, Go, 工具, 终端, 小工具, 开发, 编程, 命令, 工具开发, 代码实现, 运行命令,GO开发IP过滤小脚本, go, 工具, go开发ip过滤, go ip过滤脚本, go ip过滤,Go 开发终端小工具, golang, 工具, 开发, 编程, 终端, 天气查询, 手机归属地查询, cobra库, 命令行小工具,Go语言的高性能User-Agent解析库, golang, 工具, User-Agent解析, 性能测试, 解析库,golang, 地址生成, 扩展包, 地理位置, 中国地址, 地址生成工具, 地址数据, 地址库,Gomail邮件发送包, golang, 工具, 邮件发送, 邮件接收, 邮件发送包, 邮件发送工具,Go, URL检测, 工具, 编程, 终端命令, 开发, 检测, 小工具, 终端命令小工具, Go终端命令小工具,Go语言安全库使用指南, Go语言, 安全库, 使用指南, crypto, encoding, hash, math, rand, strconv, time,Go语言实现守护进程, 守护进程, 技术详解, Go语言, 进程管理, 关键技术点,Go, 并发, 模式, 编程, 并发编程, Go语言, 并发模式, 并发实战, 并发指南,go:embed 在 Go 开发中的应用与最佳实践, golang, 项目创建, 快速创建, 工具, 项目, 快速, 工具,Golang, Web应用, 安全指南, 输入验证, 输出编码, 会话管理, 文件上传, 跨站脚本攻击, SQL注入, 密码存储, 身份验证, 授权, 安全配置, 日志记录, 错误处理, 性能优化, 安全审计,pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向"},"headers":[],"relativePath":"golang/AutoCorrent专有名词大小写扩展包.md","filePath":"golang/AutoCorrent专有名词大小写扩展包.md","lastUpdated":1742291207000}'),p={name:"golang/AutoCorrent专有名词大小写扩展包.md"};function l(e,s,h,o,r,k){return n(),i("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t(`<h1 id="autocorrent专有名词大小写扩展包" tabindex="-1">AutoCorrent专有名词大小写扩展包 <a class="header-anchor" href="#autocorrent专有名词大小写扩展包" aria-label="Permalink to &quot;AutoCorrent专有名词大小写扩展包&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>在编写文档时，经常会因为手误或习惯性输入，而不小心将一些技术术语写成不太规范的形式。例如，将 &quot;php&quot;、&quot;mysql&quot; 或 &quot;go&quot; 写成小写形式。虽然这些单词的写法并不会影响内容的可读性，但对于一些追求细节的开发者，尤其是有强迫症倾向的朋友来说，看到这些不规范的单词总会感到有些不舒服。</p><p>之前在使用 Learnku 网站时，我注意到无论是在评论还是文档中，这些非标准形式的单词都会在短时间内自动纠正为正确的形式，比如 &quot;PHP&quot;、&quot;MySQL&quot;、&quot;Go&quot;。这种功能不仅提高了文档的专业性，也让阅读体验更加愉悦。因此，我决定利用 golang 开发一个自动纠正单词的包，帮助在编写技术文档时自动修正这些常见的拼写问题。</p><p>所以就写了一个 golang 的包来自动纠正这些单词。</p><h2 id="包地址" tabindex="-1">包地址 <a class="header-anchor" href="#包地址" aria-label="Permalink to &quot;包地址&quot;">​</a></h2><p>可以在以下链接中找到这个包的代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    https://github.com/GoFinalPack/auto-correct</span></span></code></pre></div><h2 id="使用指南" tabindex="-1">使用指南 <a class="header-anchor" href="#使用指南" aria-label="Permalink to &quot;使用指南&quot;">​</a></h2><h4 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h4><p>可以通过以下命令安装这个包：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    go get github.com/GoFinalPack/auto-correct</span></span></code></pre></div><p>目前，该包已经更新到 v1.0.0 版本，包含了核心功能的实现和一些常见问题的修复。</p><h4 id="包结构" tabindex="-1">包结构 <a class="header-anchor" href="#包结构" aria-label="Permalink to &quot;包结构&quot;">​</a></h4><p>这个包的结构非常简单明了，便于扩展和维护：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>├── README.md</span></span>
<span class="line"><span>├── autocorrect.go</span></span>
<span class="line"><span>├── dicts.txt</span></span>
<span class="line"><span>├── go.mod</span></span>
<span class="line"><span>└── tests</span></span>
<span class="line"><span>    └── autocorrect_test.go</span></span></code></pre></div><p>其中，<strong>dicts.txt</strong> 是内置的字典文件，包含了一些常见的技术术语及其正确的大小写形式。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ruby:Ruby</span></span>
<span class="line"><span>mri:MRI</span></span>
<span class="line"><span>rails:Rails</span></span>
<span class="line"><span>gem:Gem</span></span>
<span class="line"><span>rubygems:RubyGems</span></span>
<span class="line"><span>rubyonrails:Ruby on Rails</span></span>
<span class="line"><span>ror:Ruby on Rails</span></span>
<span class="line"><span>rubyconf:RubyConf</span></span>
<span class="line"><span>railsconf:RailsConf</span></span>
<span class="line"><span>rubytuesday:Ruby Tuesday</span></span>
<span class="line"><span>coffeescript:CoffeeScript</span></span>
<span class="line"><span>scss:SCSS</span></span>
<span class="line"><span>sass:Sass</span></span>
<span class="line"><span>railscasts:RailsCasts</span></span>
<span class="line"><span>....</span></span></code></pre></div><p>可以根据自己的需求，自行添加或修改这些词条</p><h4 id="自定义字典" tabindex="-1">自定义字典 <a class="header-anchor" href="#自定义字典" aria-label="Permalink to &quot;自定义字典&quot;">​</a></h4><p>为了适应不同项目的需求，包中还支持自定义字典功能。你可以通过设置环境变量 <strong>DICTPATH</strong> 来指定自定义字典文件的路径。例如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DICTPATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/Users/pfinal/dicts.txt</span></span></code></pre></div><p>这样，程序在运行时会优先使用你指定的字典文件，从而实现更加灵活的词条管理。</p><h4 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h4><p>下面是一个简单的使用示例，展示了如何利用该包来自动纠正文档中的技术术语：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/GoFinalPack/auto-correct</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> auto_correct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AutoCorrect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;golang 使用中文测试&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Correct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: golang 使用中文测试</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pfinalclub测试&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Correct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Pfinalclub 测试</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;json测试&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Correct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: JSON 测试</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mysql 测试一下&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Correct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: MySQL 测试一下</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意： 在进行纠正时，所有的专业名词之间会自动添加空格，以确保正确匹配和替换为指定的单词。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>开发这个包的初衷是为了提升文档的专业性和可读性。随着包的完善，可以将其集成到更多的开发工具中，为团队或个人项目提供自动纠正单词的功能，减少手动调整的工作量，从而让开发者专注于更重要的任务。希望这个小工具能为你的文档编写过程带来便利。</p>`,29)]))}const g=a(p,[["render",l]]);export{d as __pageData,g as default};
