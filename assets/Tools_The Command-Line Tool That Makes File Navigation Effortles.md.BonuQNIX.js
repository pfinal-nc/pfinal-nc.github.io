import{_ as i,c as a,o as t,a6 as s}from"./chunks/framework.dsRYTprt.js";const u=JSON.parse('{"title":"Broot: The File Navigation Powerhouse Inside Your Terminal","description":"","frontmatter":{"Title":"Broot-The Command-Line Tool That Makes File Navigation Effortless","Date":"2025-10-15T09:33:00.000Z","Tags":["Tools","Command Line, Rust"],"Description":"Broot is a fast terminal file manager written in Rust. It offers an intuitive tree view, fuzzy search, quick navigation, and file preview—everything you need for efficient file management in the terminal.","Author":"PFinal南丞","Keywords":"Broot, command-line tools, file management, terminal utilities, Rust, directory navigation, file browser, CLI tools","Sticky":true,"head":[["meta",{"name":"keywords","content":"pfinalclub, git, gitsite, javascript, node, jquery, python, php, laravel, sql, database, linux, operating system, os, cpu, verilog, risc-v, bitcoin, ethereum, ai, 教程, 软件, 编程, 开发, 运维, 云计算, 网络, 互联网, 比特币, 以太坊, 操作系统, 智能合约, 数字货币, 爬虫, 逆向, usd php, wails golang"}]]},"headers":[],"relativePath":"Tools/The Command-Line Tool That Makes File Navigation Effortles.md","filePath":"Tools/The Command-Line Tool That Makes File Navigation Effortles.md","lastUpdated":1760498498000}'),o={name:"Tools/The Command-Line Tool That Makes File Navigation Effortles.md"};function n(l,e,r,d,h,c){return t(),a("div",{"data-pagefind-body":!0},e[0]||(e[0]=[s(`<h1 id="broot-the-file-navigation-powerhouse-inside-your-terminal" tabindex="-1">Broot: The File Navigation Powerhouse Inside Your Terminal <a class="header-anchor" href="#broot-the-file-navigation-powerhouse-inside-your-terminal" aria-label="Permalink to &quot;Broot: The File Navigation Powerhouse Inside Your Terminal&quot;">​</a></h1><p><img src="https://raw.githubusercontent.com/pfinal-nc/iGallery/master/blog/202510150933205.png" alt=""></p><p>Every time I dive into nested directories with <code>cd</code>, I feel like I’m wandering through a labyrinth looking for an exit. When a project has seven or eight levels of folders, finding one file can make you question your career choices. The <code>tree</code> command helps visualize the structure, but the endless scrolling text quickly becomes visual noise.</p><p>Then I discovered <strong>Broot</strong>, and it completely changed how I navigate files in the terminal.</p><hr><h2 id="what-is-broot" tabindex="-1">What Is Broot? <a class="header-anchor" href="#what-is-broot" aria-label="Permalink to &quot;What Is Broot?&quot;">​</a></h2><p>Simply put, Broot is a terminal-based file manager written in Rust. It displays your directories as an interactive tree, letting you browse and search simultaneously. It’s ridiculously fast—even huge directories open instantly.</p><h3 id="what-can-it-do" tabindex="-1">What Can It Do? <a class="header-anchor" href="#what-can-it-do" aria-label="Permalink to &quot;What Can It Do?&quot;">​</a></h3><p><strong>It’s blazingly fast</strong></p><p>I tested it on a project with tens of thousands of files—Broot opened it instantly. Complex folder trees that would make <code>tree</code> stutter appear in Broot without delay.</p><p><strong>Smart search</strong></p><p>You can use fuzzy search (just type a few letters), regular expressions (for the perfectionists), or even search file contents. Finding a file becomes a matter of seconds.</p><p><strong>Clean, readable interface</strong></p><p>The tree view makes your directory structure crystal clear. You always know exactly where you are—no more running <code>pwd</code> to double-check.</p><p><strong>Built-in file preview</strong></p><p>Select a file and hit a shortcut to preview it—with syntax highlighting for code. No need to open your editor just to peek inside.</p><p><strong>Batch file operations</strong></p><p>Copy, move, and delete files directly inside Broot—no more mile-long shell commands.</p><p><strong>Dual-panel mode</strong></p><p>It’s like a modern-day Total Commander. Two panels, side by side. Moving files feels natural and efficient.</p><p><strong>Git integration</strong></p><p>This one’s a gem. You can instantly see which files were modified, added, or deleted—perfect for reviewing before a commit.</p><p><strong>Cross-platform support</strong></p><p>Broot works on Windows, macOS, and Linux. Whatever system you’re using, it has you covered.</p><p><strong>Fully customizable</strong></p><p>You can configure key bindings, colors, and commands. I’ve remapped mine to fit my workflow perfectly.</p><hr><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>Depending on your system, installation is simple:</p><p><strong>If you have Rust installed:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broot</span></span></code></pre></div><p><strong>macOS users:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broot</span></span></code></pre></div><p><strong>Debian/Ubuntu:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broot</span></span></code></pre></div><p><strong>Other Linux distributions:</strong></p><p>Download the precompiled binaries from <a href="https://github.com/Canop/broot/releases" target="_blank" rel="noreferrer">GitHub Releases</a>.</p><h3 id="first-time-setup" tabindex="-1">First-time setup <a class="header-anchor" href="#first-time-setup" aria-label="Permalink to &quot;First-time setup&quot;">​</a></h3><p>The first time you run <code>broot</code>, it’ll ask whether to install a shell function—<strong>say yes</strong>. This enables seamless integration with your terminal.</p><p>You’ll usually add something like this to your <code>.bashrc</code> or <code>.zshrc</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.config/broot/launcher/bash/br</span></span></code></pre></div><p>Then restart your terminal or reload the config file.</p><hr><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage&quot;">​</a></h2><h3 id="launching" tabindex="-1">Launching <a class="header-anchor" href="#launching" aria-label="Permalink to &quot;Launching&quot;">​</a></h3><p>Once configured, just type:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">br</span></span></code></pre></div><h3 id="navigation" tabindex="-1">Navigation <a class="header-anchor" href="#navigation" aria-label="Permalink to &quot;Navigation&quot;">​</a></h3><p>You’ll see a tree view of your current directory.</p><ul><li>Move with arrow keys or <code>h/j/k/l</code> (Vim users rejoice)</li><li><code>Enter</code> to enter a directory</li><li><code>Esc</code> or <code>Backspace</code> to go up a level</li><li><code>Ctrl + ↑/↓</code> to jump between directory levels quickly</li></ul><h3 id="searching" tabindex="-1">Searching <a class="header-anchor" href="#searching" aria-label="Permalink to &quot;Searching&quot;">​</a></h3><p>Type directly in the input bar to start searching.</p><ul><li>Fuzzy search: just type part of the name</li><li>Regex search: use patterns like <code>/\\.md$/</code> for Markdown files</li><li>Content search: prefix with <code>c/</code></li></ul><h3 id="file-preview" tabindex="-1">File preview <a class="header-anchor" href="#file-preview" aria-label="Permalink to &quot;File preview&quot;">​</a></h3><p>Select a file and press <code>Ctrl + →</code> for an instant preview with syntax highlighting.</p><hr><h2 id="common-commands" tabindex="-1">Common Commands <a class="header-anchor" href="#common-commands" aria-label="Permalink to &quot;Common Commands&quot;">​</a></h2><p>Use <code>:</code> to enter commands at the bottom.</p><ul><li><code>:q</code> — quit</li><li><code>:h</code> — show/hide hidden files</li><li><code>:size</code> — show file sizes</li><li><code>:dates</code> — show modification dates</li><li><code>:git_status</code> — show Git status</li><li><code>:cp</code> — copy</li><li><code>:mv</code> — move</li><li><code>:rm</code> — delete (careful!)</li><li><code>:mkdir</code> — create directory</li></ul><p>Example: select a file, type <code>:cp</code>, and specify a destination path to copy.</p><hr><h2 id="advanced-tricks" tabindex="-1">Advanced Tricks <a class="header-anchor" href="#advanced-tricks" aria-label="Permalink to &quot;Advanced Tricks&quot;">​</a></h2><h3 id="dual-panel-mode" tabindex="-1">Dual-panel mode <a class="header-anchor" href="#dual-panel-mode" aria-label="Permalink to &quot;Dual-panel mode&quot;">​</a></h3><p>Press <code>Ctrl + →</code> to open a second panel.</p><ul><li>Switch panels: <code>Ctrl + ←/→</code></li><li>Move files between panels</li><li>Close current panel: <code>Ctrl + w</code></li></ul><p>Perfect for organizing files—source on the left, destination on the right.</p><h3 id="sorting" tabindex="-1">Sorting <a class="header-anchor" href="#sorting" aria-label="Permalink to &quot;Sorting&quot;">​</a></h3><p>Need to find the largest or newest files?</p><ul><li><code>:sort_by_size</code> — by size</li><li><code>:sort_by_date</code> — by date</li><li><code>:sort_by_name</code> — by name</li></ul><p>Great for cleaning up disk space.</p><h3 id="disk-usage" tabindex="-1">Disk usage <a class="header-anchor" href="#disk-usage" aria-label="Permalink to &quot;Disk usage&quot;">​</a></h3><p><code>:sizes</code> visualizes folder sizes—far clearer than <code>du</code>.</p><h3 id="run-external-commands" tabindex="-1">Run external commands <a class="header-anchor" href="#run-external-commands" aria-label="Permalink to &quot;Run external commands&quot;">​</a></h3><p>You can run commands directly from Broot:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {file}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {file}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {file}</span></span></code></pre></div><p><code>{file}</code> auto-expands to the selected file’s path.</p><h3 id="custom-configuration" tabindex="-1">Custom configuration <a class="header-anchor" href="#custom-configuration" aria-label="Permalink to &quot;Custom configuration&quot;">​</a></h3><p>Config lives at <code>~/.config/broot/conf.hjson</code>.</p><p>Example: add a custom “open in VS Code” command:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;invocation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;execution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code {file}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;leave_broot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="git-integration" tabindex="-1">Git integration <a class="header-anchor" href="#git-integration" aria-label="Permalink to &quot;Git integration&quot;">​</a></h3><p>Run <code>:git_status</code> in a Git repo to view:</p><ul><li><code>M</code> — modified</li><li><code>A</code> — added</li><li><code>D</code> — deleted</li><li><code>??</code> — untracked</li></ul><p>Instant project overview before committing.</p><hr><h2 id="handy-tips" tabindex="-1">Handy Tips <a class="header-anchor" href="#handy-tips" aria-label="Permalink to &quot;Handy Tips&quot;">​</a></h2><h3 id="quick-project-access" tabindex="-1">Quick project access <a class="header-anchor" href="#quick-project-access" aria-label="Permalink to &quot;Quick project access&quot;">​</a></h3><p>Add an alias in your shell config:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> brp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;br ~/projects&#39;</span></span></code></pre></div><p>Now just type <code>brp</code> to open your projects folder.</p><h3 id="integrate-with-cd" tabindex="-1">Integrate with <code>cd</code> <a class="header-anchor" href="#integrate-with-cd" aria-label="Permalink to &quot;Integrate with \`cd\`&quot;">​</a></h3><p>If you run <code>br</code> (not <code>broot</code>), select a directory, and press <code>Alt + Enter</code>, your shell will automatically <code>cd</code> there. No more climbing directories by hand.</p><h3 id="filter-by-file-type" tabindex="-1">Filter by file type <a class="header-anchor" href="#filter-by-file-type" aria-label="Permalink to &quot;Filter by file type&quot;">​</a></h3><p>Use regex for fast filtering:</p><ul><li>JS files: <code>/\\.js$/</code></li><li>Images: <code>/\\.(png|jpg|gif)$/</code></li><li>Configs: <code>/\\.config/</code></li></ul><h3 id="disk-cleanup" tabindex="-1">Disk cleanup <a class="header-anchor" href="#disk-cleanup" aria-label="Permalink to &quot;Disk cleanup&quot;">​</a></h3><p>Combine <code>:sizes</code> with <code>:sort_by_size</code>—your biggest folders reveal themselves instantly.</p><h3 id="set-bookmarks" tabindex="-1">Set bookmarks <a class="header-anchor" href="#set-bookmarks" aria-label="Permalink to &quot;Set bookmarks&quot;">​</a></h3><p>Add shortcuts in the config:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ctrl-p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;execution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:goto ~/projects&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Press <code>Ctrl+P</code> to jump straight to your projects directory.</p><hr><h2 id="real-world-scenarios" tabindex="-1">Real-World Scenarios <a class="header-anchor" href="#real-world-scenarios" aria-label="Permalink to &quot;Real-World Scenarios&quot;">​</a></h2><h3 id="searching-in-large-projects" tabindex="-1">Searching in large projects <a class="header-anchor" href="#searching-in-large-projects" aria-label="Permalink to &quot;Searching in large projects&quot;">​</a></h3><p>Need to find a component fast?</p><ol><li>Run <code>br</code></li><li>Type <code>header</code></li><li>Use arrow keys to navigate</li><li>Preview with <code>Ctrl + →</code></li><li>Open with <code>:code</code></li></ol><p>Done in seconds.</p><h3 id="cleaning-up-node-modules" tabindex="-1">Cleaning up <code>node_modules</code> <a class="header-anchor" href="#cleaning-up-node-modules" aria-label="Permalink to &quot;Cleaning up \`node_modules\`&quot;">​</a></h3><p>Front-end projects eating disk space?</p><ol><li>Run <code>br</code></li><li>Filter <code>node_modules</code></li><li>Use <code>:sizes</code></li><li>Delete with <code>:rm</code></li></ol><p>Free up gigabytes instantly.</p><h3 id="reviewing-before-commit" tabindex="-1">Reviewing before commit <a class="header-anchor" href="#reviewing-before-commit" aria-label="Permalink to &quot;Reviewing before commit&quot;">​</a></h3><ol><li>Run <code>br</code> inside a repo</li><li><code>:git_status</code> to view changes</li><li>Preview modified files</li><li>Commit confidently</li></ol><p>Much better than <code>git status</code>.</p><h3 id="batch-operations" tabindex="-1">Batch operations <a class="header-anchor" href="#batch-operations" aria-label="Permalink to &quot;Batch operations&quot;">​</a></h3><p>While Broot doesn’t handle bulk renaming directly, you can use <code>:!</code> to call your custom scripts for mass processing.</p><hr><h2 id="tool-comparisons" tabindex="-1">Tool Comparisons <a class="header-anchor" href="#tool-comparisons" aria-label="Permalink to &quot;Tool Comparisons&quot;">​</a></h2><p><strong>vs <code>ls</code>:</strong><code>ls</code> only shows the current folder. Broot visualizes the whole structure interactively.</p><p><strong>vs <code>tree</code>:</strong><code>tree</code> floods your screen with text; Broot folds, filters, and interacts intelligently.</p><p><strong>vs Midnight Commander:</strong> MC is powerful but clunky. Broot feels modern and lightweight.</p><p><strong>vs GUI file managers:</strong> GUI tools require a mouse and context switching. Broot keeps you entirely in the terminal, keyboard only—pure efficiency.</p><hr><h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h2><p>Written in Rust, Broot is lightning fast:</p><ul><li>Massive directories open instantly</li><li>Minimal memory footprint</li><li>Real-time search feedback</li><li>Handles tens of thousands of files with ease</li></ul><p>I benchmarked it on a 50,000+ file project—indexed in under a second.</p><hr><h2 id="final-thoughts" tabindex="-1">Final Thoughts <a class="header-anchor" href="#final-thoughts" aria-label="Permalink to &quot;Final Thoughts&quot;">​</a></h2><p>After using Broot for a few months, there’s no going back.</p><p>Navigating with <code>cd</code> and <code>ls</code> feels ancient now. I just launch <code>br</code>, search, and jump straight where I need to be. For deep project trees, it’s a lifesaver.</p><p>Git integration, dual panels, and real-time previews make it feel like a full IDE inside the terminal. And thanks to Rust, it’s lightning fast and rock solid.</p><p>If you live in the terminal or wrestle with complex directory structures, try Broot. Just don’t forget to enable the shell integration—it’s crucial for the full experience.</p><p>Since I installed it, I’ve barely used <code>cd</code> at all. 😄</p><hr><p><strong>Related Links</strong></p><ul><li>GitHub: <a href="https://github.com/Canop/broot" target="_blank" rel="noreferrer">https://github.com/Canop/broot</a></li><li>Docs: <a href="https://dystroy.org/broot/" target="_blank" rel="noreferrer">https://dystroy.org/broot/</a></li><li>Config examples: <a href="https://github.com/Canop/broot/tree/main/resources" target="_blank" rel="noreferrer">https://github.com/Canop/broot/tree/main/resources</a></li></ul><hr><p><em>Got questions or thoughts? Drop a comment below!</em></p>`,139)]))}const g=i(o,[["render",n]]);export{u as __pageData,g as default};
