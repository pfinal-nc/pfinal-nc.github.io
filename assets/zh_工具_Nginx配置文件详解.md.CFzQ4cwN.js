import{_ as n,c as a,o as p,a6 as e}from"./chunks/framework.BLq2o8be.js";const g=JSON.parse('{"title":"Nginx配置文件详解","description":"Nginx配置文件详解","frontmatter":{"title":"Nginx配置文件详解","date":"2023-04-27T22:10:20.000Z","author":"PFinal南丞","tags":["Nginx"],"description":"Nginx配置文件详解","keywords":"Nginx, 配置文件, 详解, 配置, Nginx配置文件详解, Nginx配置文件详解","head":[["meta",{"name":"keywords","content":"Nginx, 配置文件, 详解, 配置, Nginx配置文件详解, Nginx配置文件详解"}]]},"headers":[],"relativePath":"zh/工具/Nginx配置文件详解.md","filePath":"zh/工具/Nginx配置文件详解.md","lastUpdated":1752052166000}'),l={name:"zh/工具/Nginx配置文件详解.md"};function i(c,s,t,o,r,_){return p(),a("div",{"data-pagefind-body":!0},s[0]||(s[0]=[e(`<h1 id="nginx配置文件详解" tabindex="-1">Nginx配置文件详解 <a class="header-anchor" href="#nginx配置文件详解" aria-label="Permalink to &quot;Nginx配置文件详解&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#定义Nginx运行的用户和用户组</span></span>
<span class="line"><span>user www www;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#nginx进程数，建议设置为等于CPU总核心数。</span></span>
<span class="line"><span>worker_processes 8;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span>
<span class="line"><span>error_log /var/log/nginx/error.log info;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#进程文件</span></span>
<span class="line"><span>pid /var/run/nginx.pid;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span></span>
<span class="line"><span>worker_rlimit_nofile 65535;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#工作模式与连接数上限</span></span>
<span class="line"><span>events</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</span></span>
<span class="line"><span>use epoll;</span></span>
<span class="line"><span>#单个进程最大连接数（最大连接数=连接数*进程数）</span></span>
<span class="line"><span>worker_connections 65535;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#设定http服务器</span></span>
<span class="line"><span>http</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>include mime.types; #文件扩展名与文件类型映射表</span></span>
<span class="line"><span>default_type application/octet-stream; #默认文件类型</span></span>
<span class="line"><span>#charset utf-8; #默认编码</span></span>
<span class="line"><span>server_names_hash_bucket_size 128; #服务器名字的hash表大小</span></span>
<span class="line"><span>client_header_buffer_size 32k; #上传文件大小限制</span></span>
<span class="line"><span>large_client_header_buffers 4 64k; #设定请求缓</span></span>
<span class="line"><span>client_max_body_size 8m; #设定请求缓</span></span>
<span class="line"><span>sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span>
<span class="line"><span>autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span></span>
<span class="line"><span>tcp_nopush on; #防止网络阻塞</span></span>
<span class="line"><span>tcp_nodelay on; #防止网络阻塞</span></span>
<span class="line"><span>keepalive_timeout 120; #长连接超时时间，单位是秒</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span>
<span class="line"><span>fastcgi_connect_timeout 300;</span></span>
<span class="line"><span>fastcgi_send_timeout 300;</span></span>
<span class="line"><span>fastcgi_read_timeout 300;</span></span>
<span class="line"><span>fastcgi_buffer_size 64k;</span></span>
<span class="line"><span>fastcgi_buffers 4 64k;</span></span>
<span class="line"><span>fastcgi_busy_buffers_size 128k;</span></span>
<span class="line"><span>fastcgi_temp_file_write_size 128k;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#gzip模块设置</span></span>
<span class="line"><span>gzip on; #开启gzip压缩输出</span></span>
<span class="line"><span>gzip_min_length 1k; #最小压缩文件大小</span></span>
<span class="line"><span>gzip_buffers 4 16k; #压缩缓冲区</span></span>
<span class="line"><span>gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span>
<span class="line"><span>gzip_comp_level 2; #压缩等级</span></span>
<span class="line"><span>gzip_types text/plain application/x-javascript text/css application/xml;</span></span>
<span class="line"><span>#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span>
<span class="line"><span>gzip_vary on;</span></span>
<span class="line"><span>#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>upstream blog.ha97.com {</span></span>
<span class="line"><span>#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span>
<span class="line"><span>server 192.168.80.121:80 weight=3;</span></span>
<span class="line"><span>server 192.168.80.122:80 weight=2;</span></span>
<span class="line"><span>server 192.168.80.123:80 weight=3;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#虚拟主机的配置</span></span>
<span class="line"><span>server</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    #监听端口</span></span>
<span class="line"><span>    listen 80;</span></span>
<span class="line"><span>    #域名可以有多个，用空格隔开</span></span>
<span class="line"><span>    server_name www.ha97.com ha97.com;</span></span>
<span class="line"><span>    index index.html index.htm index.php;</span></span>
<span class="line"><span>    root /data/www/ha97;</span></span>
<span class="line"><span>    #隐藏入口文件</span></span>
<span class="line"><span>     location / {</span></span>
<span class="line"><span>            if (!-e $request_filename){</span></span>
<span class="line"><span>              rewrite ^/(.*)$ /index.php/$1 last;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    location ~ .*\\.(php|php5)?$</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>    fastcgi_pass 127.0.0.1:9000;</span></span>
<span class="line"><span>    fastcgi_index index.php;</span></span>
<span class="line"><span>    include fastcgi.conf;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    #图片缓存时间设置</span></span>
<span class="line"><span>    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>    expires 10d;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    #JS和CSS缓存时间设置</span></span>
<span class="line"><span>    location ~ .*\\.(js|css)?$</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>    expires 1h;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    #日志格式设定</span></span>
<span class="line"><span>    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span>    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span>    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;</span></span>
<span class="line"><span>    #定义本虚拟主机的访问日志</span></span>
<span class="line"><span>    access_log /var/log/nginx/ha97access.log access;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    #对 &quot;/&quot; 启用反向代理</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:88;</span></span>
<span class="line"><span>    proxy_redirect off;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>    #以下是一些反向代理的配置，可选。</span></span>
<span class="line"><span>    proxy_set_header Host $host;</span></span>
<span class="line"><span>    client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span></span>
<span class="line"><span>    client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span></span>
<span class="line"><span>    proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span></span>
<span class="line"><span>    proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span></span>
<span class="line"><span>    proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span></span>
<span class="line"><span>    proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span>
<span class="line"><span>    proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span></span>
<span class="line"><span>    proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span></span>
<span class="line"><span>    proxy_temp_file_write_size 64k;</span></span>
<span class="line"><span>    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    #设定查看Nginx状态的地址</span></span>
<span class="line"><span>    location /NginxStatus {</span></span>
<span class="line"><span>    stub_status on;</span></span>
<span class="line"><span>    access_log on;</span></span>
<span class="line"><span>    auth_basic &quot;NginxStatus&quot;;</span></span>
<span class="line"><span>    auth_basic_user_file conf/htpasswd;</span></span>
<span class="line"><span>    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    #本地动静分离反向代理配置</span></span>
<span class="line"><span>    #所有jsp的页面均交由tomcat或resin处理</span></span>
<span class="line"><span>    location ~ .(jsp|jspx|do)?$ {</span></span>
<span class="line"><span>    proxy_set_header Host $host;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:8080;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    #所有静态文件由nginx直接读取不经过tomcat或resin</span></span>
<span class="line"><span>    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span></span>
<span class="line"><span>    { expires 15d; }</span></span>
<span class="line"><span>    location ~ .*.(js|css)?$</span></span>
<span class="line"><span>    { expires 1h; }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,2)]))}const x=n(l,[["render",i]]);export{g as __pageData,x as default};
